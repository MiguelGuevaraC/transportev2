<?php

namespace App\Http\Requests\TireOperationRequest;

use Illuminate\Validation\Validator;
use App\Http\Requests\StoreRequest;
use App\Models\Vehicle;

/**
 * @OA\Schema(
 *     schema="TireOperationRequest",
 *     title="TireOperationRequest",
 *     description="Datos necesarios para registrar una operaci칩n de neum치tico",
 *     required={"operation_type", "position", "operation_date", "tire_id"},
 * 
 *     @OA\Property(property="operation_type", type="string", description="Tipo de operaci칩n (Asignaci칩n, Cambio, Reparaci칩n, etc.)"),
 *     @OA\Property(property="vehicle_id", type="integer", nullable=true, description="ID del veh칤culo asignado"),
 *     @OA\Property(property="position", type="integer", description="Posici칩n del neum치tico (1 a 12)"),
 *     @OA\Property(property="vehicle_km", type="number", format="float", nullable=true, description="Kilometraje del veh칤culo"),
 *     @OA\Property(property="operation_date", type="string", format="date-time", description="Fecha de la operaci칩n"),
 *     @OA\Property(property="comment", type="string", nullable=true, description="Comentario"),
 *     @OA\Property(property="driver_id", type="integer", nullable=true, description="ID del conductor"),
 *     @OA\Property(property="user_id", type="integer", nullable=true, description="ID del usuario que registra"),
 *     @OA\Property(property="tire_id", type="integer", description="ID del neum치tico relacionado")
 * )
 */
class StoreTireOperationRequest extends StoreRequest
{
    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        return [
            'operation_type' => ['required', 'string'],
            'vehicle_id' => ['nullable', 'integer', 'exists:vehicles,id'],
            'position' => ['required', 'integer', 'min:0'],
            'vehicle_km' => ['nullable', 'numeric'],
            'operation_date' => ['required', 'date'],
            'comment' => ['nullable', 'string'],
            'driver_id' => ['nullable', 'integer', 'exists:workers,id'],
            'user_id' => ['nullable', 'integer', 'exists:users,id'],
            'tire_id' => ['required', 'integer', 'exists:tires,id'],
            'presion_aire' => ['nullable', 'string'],
        ];
    }

    public function messages(): array
    {
        return [
            'operation_type.required' => 'El tipo de operaci칩n es obligatorio.',
            'operation_type.string' => 'El tipo de operaci칩n debe ser texto.',

            'position.required' => 'La posici칩n del neum치tico es obligatoria.',
            'position.integer' => 'La posici칩n debe ser un n칰mero entero.',
            'position.between' => 'La posici칩n debe estar entre 1 y 12.',

            'operation_date.required' => 'La fecha de operaci칩n es obligatoria.',
            'operation_date.date' => 'La fecha de operaci칩n no es v치lida.',

            'tire_id.required' => 'El neum치tico relacionado es obligatorio.',
            'tire_id.exists' => 'El neum치tico no existe.',

            'vehicle_id.exists' => 'El veh칤culo no existe.',
            'driver_id.exists' => 'El conductor no existe.',
            'user_id.exists' => 'El usuario no existe.',
        ];
    }
    public function withValidator(Validator $validator)
    {
        $validator->after(function ($validator) {

            if (strtolower($this->operation_type) === 'asignacion') {
                $tire = \App\Models\Tire::withTrashed()->find($this->tire_id);

                if ($tire) {
                    // Verifica si est치 asignado a otro veh칤culo activo
                    if ($tire->vehicle_id && $tire->vehicle_id != $this->vehicle_id) {
                        $otherVehicle = \App\Models\Vehicle::withTrashed()->find($tire->vehicle_id);
                        if ($otherVehicle && is_null($otherVehicle->deleted_at)) {
                            $plate = $otherVehicle->plate ?? 'desconocida';
                            $validator->errors()->add('tire_id', "Este neum치tico ya est치 asignado a otro veh칤culo con placa {$plate}.");
                        }
                    }

                    // Verifica si ya est치 asignado al mismo veh칤culo en alguna posici칩n
                    if ($tire->vehicle_id == $this->vehicle_id && $tire->position_vehicle) {
                        $validator->errors()->add('tire_id', "Este neum치tico ya est치 asignado en la posici칩n {$tire->position_vehicle} de este mismo veh칤culo.");
                    }
                    $vehicle = Vehicle::find($this->vehicle_id);

                    // 游뛂 Validar que la posici칩n est칠 dentro del rango permitido por los ejes del veh칤culo
                    if ($vehicle->ejes > 0) {
                       

                        if ($vehicle->ejes) {
                            $maxPosition = $vehicle->ejes * 4;
                            if ( $this->position> $maxPosition) {
                                $validator->errors()->add('position', "Este veh칤culo tiene {$vehicle->ejes} ejes, por lo tanto solo permite posiciones de 1 a {$maxPosition}.");
                            }

                        } else {
                            $validator->errors()->add('position', "Este veh칤culo no tiene ejes registrado");
                        }
                    }
                }
            }
        });
    }




}
