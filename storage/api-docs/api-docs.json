{
    "openapi": "3.0.0",
    "info": {
        "title": "API's Hernandez Transportation System",
        "description": "API's for transportation management",
        "version": "1.0.0"
    },
    "paths": {
        "/transportev2/public/api/access": {
            "get": {
                "tags": [
                    "Access"
                ],
                "summary": "Get all Access",
                "operationId": "c2ab42a236f336fb7f307007bf5f0639",
                "responses": {
                    "200": {
                        "description": "List of active access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/access?page=1"
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/access?page=2"
                                        },
                                        "path": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/access"
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "example": "null"
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 15
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/address": {
            "get": {
                "tags": [
                    "Address"
                ],
                "summary": "Get all Address",
                "description": "Show all Address",
                "operationId": "e66f1f767fffd02b8e1ccea99211e91d",
                "responses": {
                    "200": {
                        "description": "List of Address"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Address"
                ],
                "summary": "Store a new address",
                "description": "Create a new address",
                "operationId": "1b37544a100ac5aed612106863e66352",
                "requestBody": {
                    "description": "Address data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Direction of User",
                                        "type": "string",
                                        "example": "Direccion 1"
                                    },
                                    "reference": {
                                        "description": "Reference of User",
                                        "type": "string",
                                        "example": "Reference 1"
                                    },
                                    "client_id": {
                                        "description": "Id person of User",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Address created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some Fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/addressForPerson/{idPersona}": {
            "get": {
                "tags": [
                    "Address"
                ],
                "summary": "Get Address for Person",
                "description": "Show all Address",
                "operationId": "11fcb71432238b3b797532a35a51d4cb",
                "parameters": [
                    {
                        "name": "idPersona",
                        "in": "path",
                        "description": "ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Address"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/address/{id}": {
            "get": {
                "tags": [
                    "Address"
                ],
                "summary": "Get a address by ID",
                "description": "Retrieve a address by its ID",
                "operationId": "72d04c4a9fa0463091a05d49b0e4abee",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the address to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Address"
                ],
                "summary": "Update an existing address",
                "description": "Update an existing address",
                "operationId": "206d2b60dd765107ec82c5a0f771c7b4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the address to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Address data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Direction of User",
                                        "type": "string",
                                        "example": "Direccion 1"
                                    },
                                    "reference": {
                                        "description": "Reference of User",
                                        "type": "string",
                                        "example": "Reference 1"
                                    },
                                    "client_id": {
                                        "description": "Id person of User",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Address updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Address"
                ],
                "summary": "Delete a address",
                "description": "Delete a address by ID",
                "operationId": "5139648280e077db26ffe37ff36d6ba6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the address to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/bank": {
            "get": {
                "tags": [
                    "Bank"
                ],
                "summary": "Get all banks with pagination",
                "operationId": "56304df503452fc245c60c3da0401d5f",
                "responses": {
                    "200": {
                        "description": "List of active banks",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Bank"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/bank?page=1"
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/bank?page=2"
                                        },
                                        "path": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/bank"
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "example": "null"
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 15
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Bank"
                ],
                "summary": "Crear Bank",
                "operationId": "c753e6e5e5e241e0e7709de9fb36556f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BankRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bank creada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bank"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/bank-list": {
            "get": {
                "tags": [
                    "Bank"
                ],
                "summary": "Obtener información de Banks con filtros y ordenamiento",
                "operationId": "a009dccbf4a5e93ac577b6805a40eb2b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Filtrar por ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filtrar por name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista de Banks",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bank"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validación fallida",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/bank/{id}": {
            "get": {
                "tags": [
                    "Bank"
                ],
                "summary": "Obtener detalles de un Bank por ID",
                "operationId": "1494d838cd29950c3203f87a7fc4a821",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID del Bank",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bank encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bank"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Banco no encontrada",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Banco no encontrada"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Bank"
                ],
                "summary": "Actualizar un Bank",
                "operationId": "dd6b3e8a97fb8f65985085b604e4cab3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BankRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bank actualizada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bank"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Banco no encontrada",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Banco no encontrada"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error interno",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error interno del servidor"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Bank"
                ],
                "summary": "Eliminar un Bankpor ID",
                "operationId": "7059edc9e92bdae29bdab1fbb18c8e19",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bank eliminado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Bank eliminado exitosamente"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Banco no encontrada"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/box": {
            "get": {
                "tags": [
                    "Box"
                ],
                "summary": "Get all Boxes",
                "operationId": "3ac079b2c7ff5a353baa620b686f7089",
                "responses": {
                    "200": {
                        "description": "Lista de cajas sin asignarse a algun usuario",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Box"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/box?page=1"
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/box?page=2"
                                        },
                                        "path": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/box"
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "example": "null"
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 15
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Box"
                ],
                "summary": "Store a new box",
                "description": "Create a new box",
                "operationId": "4760ee990f4130a82f43b3732312349d",
                "requestBody": {
                    "description": "Box data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name Box",
                                        "type": "string",
                                        "example": "Caja Miguel"
                                    },
                                    "branchOffice_id": {
                                        "description": "id Branch Office",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Box created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Box"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some Fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/boxAll": {
            "get": {
                "tags": [
                    "Box"
                ],
                "summary": "Get all Boxes",
                "operationId": "6ed54429b7316550c89b9e8e9620b49a",
                "responses": {
                    "200": {
                        "description": "List of active Boxes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Box"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/box?page=1"
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/box?page=2"
                                        },
                                        "path": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/box"
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "example": "null"
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 15
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/boxByBranch/{id}": {
            "get": {
                "tags": [
                    "Box"
                ],
                "summary": "Get all box by Branch Office",
                "description": "Show all box by Branch Office",
                "operationId": "0d6b24253b92f98bd217e8eff3fe5e64",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Branch Office",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of box by Branch Office",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Box"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/box/{id}": {
            "get": {
                "tags": [
                    "Box"
                ],
                "summary": "Get a box by ID",
                "description": "Retrieve a box by its ID",
                "operationId": "53cb357300c832e67c65dd96acb2a785",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the box to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Box found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Box"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Box"
                ],
                "summary": "Update an existing Box",
                "description": "Update an existing Box",
                "operationId": "ed314a897a3a07df918acbfb01139161",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Box to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Client data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name Box",
                                        "type": "string",
                                        "example": "Caja Alvaro"
                                    },
                                    "branchOffice_id": {
                                        "description": "id Branch Office",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Client updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Box"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Box"
                ],
                "summary": "Delete a Box",
                "description": "Delete a Box by ID",
                "operationId": "0e88c115d8e01df8654ab1f7f8e7ef44",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Box to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Box deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/branchOffice": {
            "get": {
                "tags": [
                    "BranchOffice"
                ],
                "summary": "Get all branchOffice",
                "description": "Show all branchOffice",
                "operationId": "ccec1ea9612e5df3ed0892fd124dad96",
                "responses": {
                    "200": {
                        "description": "List of branchOffice",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BranchOffice"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "BranchOffice"
                ],
                "summary": "Store a new branchOffice",
                "description": "Create a new branchOffice",
                "operationId": "dca8dd760fc0c6488ee4e69b0fa55586",
                "requestBody": {
                    "description": "BranchOffice data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name branch office",
                                        "type": "string",
                                        "example": "Sucursal Lambayeque"
                                    },
                                    "location": {
                                        "description": "Location branch office",
                                        "type": "string",
                                        "example": "Ciudad Lambayeque"
                                    },
                                    "address": {
                                        "description": "Address branch office",
                                        "type": "string",
                                        "example": "Av. Insurgentes Sur 12345"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "BranchOffice created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BranchOffice"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some Fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/branchOffice/{id}": {
            "get": {
                "tags": [
                    "BranchOffice"
                ],
                "summary": "Get a branchOffice by ID",
                "description": "Retrieve a branchOffice by its ID",
                "operationId": "8d99c9a2669b2e8a5745de19a5758ef7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the branchOffice to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "BranchOffice found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BranchOffice"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "BranchOffice"
                ],
                "summary": "Update an existing BranchOffice",
                "description": "Update an existing BranchOffice",
                "operationId": "8eb43b1129bb760ac20dac64ba730fd0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the BranchOffice to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Client data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name branch office",
                                        "type": "string",
                                        "example": "Sucursal Lambayeque2"
                                    },
                                    "location": {
                                        "description": "Location branch office",
                                        "type": "string",
                                        "example": "Ciudad Lambayeque2"
                                    },
                                    "address": {
                                        "description": "Address branch office",
                                        "type": "string",
                                        "example": "Av. Insurgentes Sur 12345"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Client updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BranchOffice"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "BranchOffice"
                ],
                "summary": "Delete a BranchOffice",
                "description": "Delete a BranchOffice by ID",
                "operationId": "8b5bd0310ff2d45fc14336e72ffa1dcc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the BranchOffice to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Branch Office deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/carrierGuide": {
            "get": {
                "tags": [
                    "CarrierGuide"
                ],
                "summary": "Get all carrierGuide",
                "description": "Show all carrierGuide",
                "operationId": "e3461d6839c12e092a35597a0341cfb8",
                "responses": {
                    "200": {
                        "description": "List of carrierGuide"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "CarrierGuide"
                ],
                "summary": "Create a new carrierGuide",
                "description": "Create a new carrierGuide",
                "operationId": "c1f3f1df45610f45c2c458c3f81843f3",
                "requestBody": {
                    "description": "Reception data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "subContract": {
                                        "description": "Subcontrato",
                                        "type": "integer",
                                        "example": null
                                    },
                                    "transferStartDate": {
                                        "description": "Fecha de inicio de transferencia",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": null
                                    },
                                    "transferDateEstimated": {
                                        "description": "Fecha de inicio de transferencia",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": null
                                    },
                                    "tract_id": {
                                        "description": "ID del tracto",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "platform_id": {
                                        "description": "ID de la plataforma",
                                        "type": "integer",
                                        "example": null
                                    },
                                    "origin_id": {
                                        "description": "ID de origen",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "destination_id": {
                                        "description": "ID de destino",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "sender_id": {
                                        "description": "ID del remitente",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "recipient_id": {
                                        "description": "ID del destinatario",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "reception_id": {
                                        "description": "ID Reception",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "branch_office_id": {
                                        "description": "ID Branch Office",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "payResponsible_id": {
                                        "description": "ID del responsable de pago",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "driver_id": {
                                        "description": "ID del conductor",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "copilot_id": {
                                        "description": "ID del copilot",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "subcontract_id": {
                                        "description": "ID del Subcontract",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Reception created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Reception created successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error: The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/carrierGuide/{id}": {
            "get": {
                "tags": [
                    "CarrierGuide"
                ],
                "summary": "Get a carrierGuide by ID",
                "description": "Retrieve a carrierGuide by its ID",
                "operationId": "359324010da005ca72361ac3ff416ba3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the carrierGuide to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CarrierGuide found"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "CarrierGuide"
                ],
                "summary": "Update an existing carrierGuide",
                "description": "Update an existing carrierGuide",
                "operationId": "5523d323532c5aca2877e76e95c3a2e6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the carrierGuide to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Reception data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "subContract": {
                                        "description": "Subcontrato",
                                        "type": "integer",
                                        "example": null
                                    },
                                    "transferStartDate": {
                                        "description": "Fecha de inicio de transferencia",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": null
                                    },
                                    "transferDateEstimated": {
                                        "description": "Fecha de inicio de transferencia",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": null
                                    },
                                    "tract_id": {
                                        "description": "ID del tracto",
                                        "type": "integer",
                                        "example": null
                                    },
                                    "platform_id": {
                                        "description": "ID de la plataforma",
                                        "type": "integer",
                                        "example": null
                                    },
                                    "origin_id": {
                                        "description": "ID de origen",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "destination_id": {
                                        "description": "ID de destino",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "sender_id": {
                                        "description": "ID del remitente",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "recipient_id": {
                                        "description": "ID del destinatario",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "reception_id": {
                                        "description": "ID Reception",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "payResponsible_id": {
                                        "description": "ID del responsable de pago",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "branch_office_id": {
                                        "description": "ID Branch Office",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "driver_id": {
                                        "description": "ID del conductor",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "copilot_id": {
                                        "description": "ID del copilot",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "subcontract_id": {
                                        "description": "ID del Subcontract",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Carrier Guide updated successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "CarrierGuide"
                ],
                "summary": "Delete a CarrierGuide",
                "description": "Delete a CarrierGuide by ID",
                "operationId": "dbdc752c688acf1cf28e62807c10b2f1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the CarrierGuide to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CarrierGuide deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/carrierGuide/{id}/status": {
            "put": {
                "tags": [
                    "CarrierGuide"
                ],
                "summary": "Update CarrierGuide status",
                "description": "Update the status of a CarrierGuide to either 'Pendiente' or Entregado or 'En Transito'",
                "operationId": "3de124c913534dd1f4be2da191ec2b4a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the CarrierGuide",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "New status for the CarrierGuide (Pendiente or En Transito)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Pendiente",
                                "En Transito"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CarrierGuide status updated successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/comissionAgent": {
            "get": {
                "tags": [
                    "ComissionAgent"
                ],
                "summary": "Get all comission",
                "description": "Show all comission",
                "operationId": "a3a9994ea9067cc0ee589f1217f73524",
                "responses": {
                    "200": {
                        "description": "List of comission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Comission_Agent"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "ComissionAgent"
                ],
                "summary": "Store a new comissionAgent",
                "description": "Create a new comissionAgent",
                "operationId": "129b249998266a0f1a2cbc052ea7959a",
                "requestBody": {
                    "description": "Comission_Agent data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "paymentComission": {
                                        "description": "paymentComission Type of User",
                                        "type": "string",
                                        "example": "100"
                                    },
                                    "person_id": {
                                        "description": "persona_id Type of User",
                                        "type": "integer",
                                        "example": "1"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Comission_Agent created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Comission_Agent"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some Fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/comissionAgent/{id}": {
            "get": {
                "tags": [
                    "ComissionAgent"
                ],
                "summary": "Get a comissionAgent by ID",
                "description": "Retrieve a comissionAgent by its ID",
                "operationId": "6b67af333ee726f9e7d037421b20b7da",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the comissionAgent to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comission Agent encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comission_Agent"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "ComissionAgent"
                ],
                "summary": "Update an existing comissionAgent",
                "description": "Update an existing comissionAgent",
                "operationId": "bb622e5b765b9d1565338bf0b9a51f58",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the comissionAgent to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Comission Agent data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "paymentComission": {
                                        "description": "paymentComission Type of User",
                                        "type": "string",
                                        "example": "100"
                                    },
                                    "person_id": {
                                        "description": "persona_id Type of User",
                                        "type": "integer",
                                        "example": "1"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Comission Agent updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Comission_Agent"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "ComissionAgent"
                ],
                "summary": "Delete a comissionAgent",
                "description": "Delete a comissionAgent by ID",
                "operationId": "5c422969de90eaf1a56851c6406cca69",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the comissionAgent to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comision Agent deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/contactInfo": {
            "get": {
                "tags": [
                    "ContactInfo"
                ],
                "summary": "Get all Contact Info",
                "description": "Show all Contact Info",
                "operationId": "7127bdcc1e897e7db702e9473b255b55",
                "responses": {
                    "200": {
                        "description": "List of Contact Info"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "ContactInfo"
                ],
                "summary": "Store a new contactInfo",
                "description": "Create a new contactInfo",
                "operationId": "5d3f4c3733bdff6f4563c8a0662e5beb",
                "requestBody": {
                    "description": "Worker data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "typeofDocument": {
                                        "description": "Type of document",
                                        "type": "string",
                                        "example": "dni"
                                    },
                                    "documentNumber": {
                                        "description": "Document number",
                                        "type": "string",
                                        "example": "12345678"
                                    },
                                    "names": {
                                        "description": "Names",
                                        "type": "string",
                                        "example": "Miguel"
                                    },
                                    "fatherSurname": {
                                        "description": "Father's surname",
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "motherSurname": {
                                        "description": "Mother's surname",
                                        "type": "string",
                                        "example": "Smith"
                                    },
                                    "address": {
                                        "description": "address",
                                        "type": "string",
                                        "example": "123 Street Ave"
                                    },
                                    "telephone": {
                                        "description": "Telephone",
                                        "type": "string",
                                        "example": "123456789"
                                    },
                                    "email": {
                                        "description": "Email",
                                        "type": "string",
                                        "example": "example@example.com"
                                    },
                                    "person_id": {
                                        "description": "Person ID",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ContactInfo created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ContactInfo"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some Fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/contactInfo/{id}": {
            "get": {
                "tags": [
                    "ContactInfo"
                ],
                "summary": "Get a contactInfo by ID",
                "description": "Retrieve a contactInfo by its ID",
                "operationId": "7cd0697e777180769559f2ab55860a01",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the contactInfo to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ContactInfo encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactInfo"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "ContactInfo"
                ],
                "summary": "Update an existing contactInfo",
                "description": "Update an existing contactInfo",
                "operationId": "988e0a915aee4d8234dc5304b5f4c7f0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the contactInfo to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Worker data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "typeofDocument": {
                                        "description": "Type of document",
                                        "type": "string",
                                        "example": "dni"
                                    },
                                    "documentNumber": {
                                        "description": "Document number",
                                        "type": "string",
                                        "example": "12345678"
                                    },
                                    "names": {
                                        "description": "Names",
                                        "type": "string",
                                        "example": "Miguel"
                                    },
                                    "fatherSurname": {
                                        "description": "Father's surname",
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "motherSurname": {
                                        "description": "Mother's surname",
                                        "type": "string",
                                        "example": "Smith"
                                    },
                                    "address": {
                                        "description": "address",
                                        "type": "string",
                                        "example": "123 Street Ave"
                                    },
                                    "telephone": {
                                        "description": "Telephone",
                                        "type": "string",
                                        "example": "123456789"
                                    },
                                    "email": {
                                        "description": "Email",
                                        "type": "string",
                                        "example": "example@example.com"
                                    },
                                    "person_id": {
                                        "description": "Person ID",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ContactInfo updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ContactInfo"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "ContactInfo"
                ],
                "summary": "Delete a contactInfo",
                "description": "Delete a contactInfo by ID",
                "operationId": "61007ee6acf82d5fddfe03e748f0070e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the contactInfo to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ContactInfo deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/contactsForPerson/{idPersona}": {
            "get": {
                "tags": [
                    "ContactInfo"
                ],
                "summary": "Get Contacts for Person",
                "description": "Show all Contacts",
                "operationId": "dfb5f8a1e98459d3853eac36eff0691e",
                "parameters": [
                    {
                        "name": "idPersona",
                        "in": "path",
                        "description": "ID of the person",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Contacts"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/creditNote": {
            "get": {
                "tags": [
                    "CreditNote"
                ],
                "summary": "Get all Moviments",
                "operationId": "663fade58ff1dcfaedbadb4a9895b9eb",
                "parameters": [
                    {
                        "name": "branch_office_id",
                        "in": "query",
                        "description": "ID de la sucursal para filtrar los movimientos",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of active Sale",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MovimentRequest"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/creditNote?page=1"
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/creditNote?page=2"
                                        },
                                        "path": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/creditNote"
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "example": "null"
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 15
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Branch Office Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Branch Office Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "CreditNote"
                ],
                "summary": "Store a new credit note",
                "description": "Create a new credit note",
                "operationId": "df2b226f2a2ca0ee354b72f488c67928",
                "requestBody": {
                    "description": "Credit Note data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "total": {
                                        "description": "Total amount",
                                        "type": "number",
                                        "format": "float",
                                        "example": 100,
                                        "nullable": true
                                    },
                                    "comment": {
                                        "description": "Comment related to the credit note",
                                        "type": "string",
                                        "example": "Pago parcial",
                                        "nullable": true
                                    },
                                    "reason": {
                                        "description": "Reason for the credit note",
                                        "type": "string",
                                        "example": "Devolución de producto"
                                    },
                                    "description": {
                                        "description": "Reason for the credit note",
                                        "type": "string",
                                        "example": "Devolución de producto"
                                    },
                                    "moviment_id": {
                                        "description": "ID of the related moviment",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "branchOffice_id": {
                                        "description": "ID of the branch office",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Credit Note created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNote"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/detailGrt": {
            "get": {
                "tags": [
                    "DetailGrt"
                ],
                "summary": "Get all detailGrt",
                "description": "Show all detailGrt",
                "operationId": "52044f982e7410d1c189ba3bbdb3160f",
                "responses": {
                    "200": {
                        "description": "List of detailGrt"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "DetailGrt"
                ],
                "summary": "Create a new detailGrt",
                "description": "Create a new detailGrt",
                "operationId": "f29c5df0b2e39067a43273271b234327",
                "requestBody": {
                    "description": "Detail GRT data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "carrierGuide_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "detailReception_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Detail GRT created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Detail GRT created successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error: The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/detailGrt/{id}": {
            "get": {
                "tags": [
                    "DetailGrt"
                ],
                "summary": "Get a detailGrt by ID",
                "description": "Retrieve a detailGrt by its ID",
                "operationId": "629a505deefdd2dfd48183663d80d455",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the detailGrt to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DetailGrt found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DetailGrt"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "DetailGrt"
                ],
                "summary": "Update an existing detailGrt",
                "description": "Update an existing detailGrt",
                "operationId": "7ff21c3e0057153c23c6f4bfeea9c845",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the detailGrt to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Detail GRT data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "carrierGuide_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "detailReception_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Detail Reception updated successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "DetailGrt"
                ],
                "summary": "Delete a DetailGrt",
                "description": "Delete a DetailGrt by ID",
                "operationId": "f428249d1dc57d20bc5ddba2ad53f094",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the DetailGrt to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detail GRT deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/detailReception": {
            "get": {
                "tags": [
                    "Detail Reception"
                ],
                "summary": "Get all detailReception",
                "description": "Show all detailReception",
                "operationId": "8096592703bfe3d4d7283684f895aa75",
                "responses": {
                    "200": {
                        "description": "List of detailReception"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Detail Reception"
                ],
                "summary": "Create a new detailReception",
                "description": "Create a new detailReception",
                "operationId": "f875db4ba5efc569c133460e9faf10fd",
                "requestBody": {
                    "description": "Detail Reception data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "description": {
                                        "type": "string",
                                        "example": "Descripción"
                                    },
                                    "weight": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 0
                                    },
                                    "paymentAmount": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 0
                                    },
                                    "comissionAmount": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 0
                                    },
                                    "comissionAgent_id": {
                                        "type": "integer",
                                        "example": null
                                    },
                                    "reception_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Detail Reception created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Detail Reception created successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error: The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/detailReception/{id}": {
            "get": {
                "tags": [
                    "Detail Reception"
                ],
                "summary": "Get a detailReception by ID",
                "description": "Retrieve a detailReception by its ID",
                "operationId": "904634b43ae61e2ed8000afb15952e13",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the detailReception to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DetailReception encontrado"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Detail Reception"
                ],
                "summary": "Update an existing detailReception",
                "description": "Update an existing detailReception",
                "operationId": "b9132be6439a1cc6950addd94d328a39",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the detailReception to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Detail Reception data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "description": {
                                        "type": "string",
                                        "example": "Descripción"
                                    },
                                    "weight": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 0
                                    },
                                    "paymentAmount": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 0
                                    },
                                    "comissionAmount": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 0
                                    },
                                    "comissionAgent_id": {
                                        "type": "integer",
                                        "example": null
                                    },
                                    "reception_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Detail Reception updated successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Detail Reception"
                ],
                "summary": "Delete a detailReception",
                "description": "Delete a detailReception by ID",
                "operationId": "fce82fff70b48b92be2a4fbad0ebec69",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the detailReception to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DetailReception deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/detailReceptionForReception/{id}": {
            "get": {
                "tags": [
                    "Detail Reception"
                ],
                "summary": "Get a detailReception by ID",
                "description": "Retrieve a detailReception by its ID Reception",
                "operationId": "38b75823ffe285fd21e0af499ec28d78",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Reception to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DetailReception encontrado"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/detailReceptionWithoutProgramming": {
            "get": {
                "tags": [
                    "Detail Reception"
                ],
                "summary": "Get all detailReception Without Programming",
                "description": "Show all detailReception Without Programming",
                "operationId": "a442a7420e6c0923567295093c6f842d",
                "parameters": [
                    {
                        "name": "programming_id",
                        "in": "query",
                        "description": "ID of the programming",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of detailReception Without Programming"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/detailWorker": {
            "get": {
                "tags": [
                    "DetailWorker"
                ],
                "summary": "Get all detailWorker",
                "description": "Show all detailWorker",
                "operationId": "b41a333c687f09ceb4f193b15e3a81c5",
                "responses": {
                    "200": {
                        "description": "List of detailWorker",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DetailWorker"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "DetailWorker"
                ],
                "summary": "Create a new detailWorker",
                "description": "Create a new detailWorker",
                "operationId": "5e320f8b0defb9fd215b8c50425c69d6",
                "requestBody": {
                    "description": "Detail Worker data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "function": {
                                        "type": "string",
                                        "example": "driver"
                                    },
                                    "worker_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "programming_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Detail Worker created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Detail Worker created successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error: The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/detailWorker/{id}": {
            "get": {
                "tags": [
                    "DetailWorker"
                ],
                "summary": "Get a detailWorker by ID",
                "description": "Retrieve a detailWorker by its ID",
                "operationId": "2e2288dc1dd5941032cfef70f2c5443f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the detailWorker to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DetailWorker found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DetailWorker"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "DetailWorker"
                ],
                "summary": "Update an existing detailWorker",
                "description": "Update an existing detailWorker",
                "operationId": "9952c60e718a027dd33aafc236f37b30",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the detailWorker to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Detail Worker data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "function": {
                                        "type": "string",
                                        "example": "driver"
                                    },
                                    "worker_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "programming_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Detail Reception updated successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "DetailWorker"
                ],
                "summary": "Delete a DetailWorker",
                "description": "Delete a DetailWorker by ID",
                "operationId": "f9b1bc06c9f12a986ba1539e2ac39a1c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the DetailWorker to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detail Worker deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/detailWorkerForProgramming/{id}": {
            "get": {
                "tags": [
                    "DetailWorker"
                ],
                "summary": "Get a detailWorker by ID",
                "description": "Retrieve a detailWorker by its ID Programming",
                "operationId": "6731252658a290907084df1dc268ab5a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the programming to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DetailWorkers found by Programming",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DetailWorker"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/document": {
            "get": {
                "tags": [
                    "Document"
                ],
                "summary": "Retrieve all Documents",
                "description": "Fetches a list of all available Documents in the system.",
                "operationId": "4246adffc5851ccb5699eedb656252e6",
                "responses": {
                    "200": {
                        "description": "Successful retrieval of the list of Documents.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Document"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Document"
                ],
                "summary": "Create a new Document",
                "description": "Stores a new Document in the database.",
                "operationId": "4963e5443e717506a5077a43714bdc37",
                "requestBody": {
                    "description": "Data for creating a Document",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "description",
                                    "vehicle_id"
                                ],
                                "properties": {
                                    "pathFile": {
                                        "description": "File path of the document",
                                        "type": "string",
                                        "example": "/uploads/documents/doc1.pdf"
                                    },
                                    "description": {
                                        "description": "Description of the Document",
                                        "type": "string",
                                        "example": "Box Truck"
                                    },
                                    "number": {
                                        "description": "Number of the Document",
                                        "type": "string",
                                        "example": "12345"
                                    },
                                    "dueDate": {
                                        "description": "Due date of the Document",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-12-31"
                                    },
                                    "status": {
                                        "description": "Status of the Document",
                                        "type": "string",
                                        "example": "Vigente"
                                    },
                                    "vehicle_id": {
                                        "description": "ID of the associated Vehicle",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Document created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Document"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Some fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/document/{id}": {
            "get": {
                "tags": [
                    "Document"
                ],
                "summary": "Get a Document by ID",
                "description": "Retrieve a Document by its ID",
                "operationId": "2e2d5f6bb585ce50d3861191c0e6b173",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Document to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Document"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Document not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Document not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Document"
                ],
                "summary": "Update an existing Document",
                "description": "Update an existing Document",
                "operationId": "2c3e7b916746b885aa1f8cbbfd3ddee1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Document to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated Document data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "description": {
                                        "description": "Description of the Document",
                                        "type": "string",
                                        "example": "Updated Description"
                                    },
                                    "vehicle_id": {
                                        "description": "ID of the associated Vehicle",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "state": {
                                        "description": "State of the Document",
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "pathFile": {
                                        "description": "Path of the related file",
                                        "type": "string",
                                        "example": "/documents/file.pdf"
                                    },
                                    "number": {
                                        "description": "Document number",
                                        "type": "string",
                                        "example": "123456"
                                    },
                                    "dueDate": {
                                        "description": "Due date of the Document",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-08-01"
                                    },
                                    "status": {
                                        "description": "Status of the Document",
                                        "type": "string",
                                        "example": "Vencido"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Document updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Document"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Document not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Document not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Document"
                ],
                "summary": "Create or Update a Document",
                "description": "Stores a new Document in the database or updates an existing one if the ID is provided.",
                "operationId": "410df8620bee0bff777eb58b28b851fd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Document to update",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Data for creating or updating a Document, including a file upload",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "description",
                                    "vehicle_id"
                                ],
                                "properties": {
                                    "pathFile": {
                                        "description": "File to be uploaded",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "description": {
                                        "description": "Description of the Document",
                                        "type": "string",
                                        "example": "Box Truck"
                                    },
                                    "number": {
                                        "description": "Number of the Document",
                                        "type": "string",
                                        "example": "12345"
                                    },
                                    "dueDate": {
                                        "description": "Due date of the Document",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-12-31"
                                    },
                                    "status": {
                                        "description": "Status of the Document",
                                        "type": "string",
                                        "example": "Vigente"
                                    },
                                    "vehicle_id": {
                                        "description": "ID of the associated Vehicle",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Document created or updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Document"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Some fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Document"
                ],
                "summary": "Delete a Document",
                "description": "Mark a Document as deleted by setting its state to inactive",
                "operationId": "ccead03f1cd6051827522a38a6d454ac",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Document to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document marked as deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Document deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Document not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Document not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/driverExpense": {
            "get": {
                "tags": [
                    "DriverExpense"
                ],
                "summary": "Get all DriverExpenses",
                "operationId": "842cb7dcab66ab12d5706e1e7ae01b4b",
                "parameters": [
                    {
                        "name": "programming_id",
                        "in": "query",
                        "description": "ID to filter driver expenses",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of active DriverExpenses",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DriverExpense"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/driverExpense?page=1"
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/driverExpense?page=2"
                                        },
                                        "path": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/driverExpense"
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "example": "null"
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 15
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "DriverExpense"
                ],
                "summary": "Store a new driverExpense",
                "description": "Create a new driverExpense",
                "operationId": "daf8d9d08d211b67d60c3e2c4f4cdb1d",
                "requestBody": {
                    "description": "DriverExpense data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "programming_id": {
                                        "description": "ID of the programming",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "expensesConcept_id": {
                                        "description": "ID of the expenses concept",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "worker_id": {
                                        "description": "ID of driver",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "amount": {
                                        "description": "Amount of the expense",
                                        "type": "number",
                                        "format": "float",
                                        "example": 50
                                    },
                                    "quantity": {
                                        "description": "Quantity of items",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "place": {
                                        "description": "Place where the expense occurred",
                                        "type": "string",
                                        "example": "Station X"
                                    },
                                    "km": {
                                        "description": "Kilometers at the time of expense",
                                        "type": "integer",
                                        "example": 100
                                    },
                                    "image": {
                                        "description": "file",
                                        "type": "string",
                                        "example": "file"
                                    },
                                    "comment": {
                                        "description": "Additional comments",
                                        "type": "string",
                                        "example": "Refueling in station X"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "DriverExpense created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DriverExpense"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Some fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/devolverMontoaCaja": {
            "post": {
                "tags": [
                    "DriverExpense"
                ],
                "summary": "Return an amount to the cash box",
                "description": "Store a new driverExpense and create a related movement",
                "operationId": "18e20f094b218e8aed79095d4994de8c",
                "requestBody": {
                    "description": "DriverExpense and movement data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "programming_id": {
                                        "description": "ID of the programming",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "worker_id": {
                                        "description": "ID of the driver",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "cash": {
                                        "description": "Cash amount returned",
                                        "type": "number",
                                        "format": "float",
                                        "example": 100
                                    },
                                    "yape": {
                                        "description": "Yape amount returned",
                                        "type": "number",
                                        "format": "float",
                                        "example": 50
                                    },
                                    "plin": {
                                        "description": "Plin amount returned",
                                        "type": "number",
                                        "format": "float",
                                        "example": 20
                                    },
                                    "card": {
                                        "description": "Card amount returned",
                                        "type": "number",
                                        "format": "float",
                                        "example": 30
                                    },
                                    "deposit": {
                                        "description": "Deposit amount returned",
                                        "type": "number",
                                        "format": "float",
                                        "example": 40
                                    },
                                    "bank_id": {
                                        "description": "ID of the bank used",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "proveedor_id": {
                                        "description": "ID of the provider",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "paymentDate": {
                                        "description": "Payment date",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2024-11-25T15:30:00Z"
                                    },
                                    "comment": {
                                        "description": "Additional comments",
                                        "type": "string",
                                        "example": "Returning remaining funds"
                                    },
                                    "image": {
                                        "description": "Image file related to the expense",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "DriverExpense created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "description": "ID of the created driverExpense",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "programming_id": {
                                            "description": "ID of the programming",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "worker_id": {
                                            "description": "ID of the driver",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "total": {
                                            "description": "Total amount returned",
                                            "type": "number",
                                            "format": "float",
                                            "example": 240
                                        },
                                        "routeFact": {
                                            "description": "Path to the stored image",
                                            "type": "string",
                                            "example": "public/photosDrivers/20241125123000_image.jpg"
                                        },
                                        "comment": {
                                            "description": "Comment added",
                                            "type": "string",
                                            "example": "Returning remaining funds"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Validation error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/driverExpense/{id}": {
            "get": {
                "tags": [
                    "DriverExpense"
                ],
                "summary": "Get a driverExpense by ID",
                "description": "Retrieve a driverExpense by its ID",
                "operationId": "66e1b060cf732c3e728f56bbb4b7a46f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the driverExpense to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DriverExpense found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DriverExpense"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "DriverExpense"
                ],
                "summary": "Update an existing driverExpense",
                "description": "Update the details of an existing driverExpense",
                "operationId": "d69505acda4d2a31309a760c8e0b90b0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the driverExpense to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "DriverExpense data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "programming_id": {
                                        "description": "ID of the programming",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "expensesConcept_id": {
                                        "description": "ID of the expenses concept",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "worker_id": {
                                        "description": "ID of driver",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "amount": {
                                        "description": "Amount of the expense",
                                        "type": "number",
                                        "format": "float",
                                        "example": 50
                                    },
                                    "quantity": {
                                        "description": "Quantity of items",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "place": {
                                        "description": "Place where the expense occurred",
                                        "type": "string",
                                        "example": "Station X"
                                    },
                                    "km": {
                                        "description": "Kilometers at the time of expense",
                                        "type": "integer",
                                        "example": 100
                                    },
                                    "image": {
                                        "description": "file",
                                        "type": "string",
                                        "example": "file"
                                    },
                                    "comment": {
                                        "description": "Additional comments",
                                        "type": "string",
                                        "example": "Refueling in station X"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "DriverExpense updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DriverExpense"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Some fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "DriverExpense"
                ],
                "summary": "Delete a DriverExpense",
                "description": "Delete a DriverExpense by ID",
                "operationId": "6c790ecbf74e8ae3ee04409b864c93c3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the DriverExpense to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Driver Expense deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/expensesConcept": {
            "get": {
                "tags": [
                    "ExpensesConcept"
                ],
                "summary": "Get all Expneses Concept",
                "operationId": "343244c3cdeb76ca10ead35910c7d99e",
                "responses": {
                    "200": {
                        "description": "List of active Expneses Concept",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ExpensesConcept"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/expensesConcept?page=1"
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/expensesConcept?page=2"
                                        },
                                        "path": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/expensesConcept"
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "example": "null"
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 15
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "ExpensesConcept"
                ],
                "summary": "Store a new expenses Concept",
                "description": "Create a new expenses Concept",
                "operationId": "639fd65e34b49dd525755b9355a4b99e",
                "requestBody": {
                    "description": "ExpensesConcept data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name ExpensesConcept",
                                        "type": "string",
                                        "example": "concepto 1"
                                    },
                                    "type": {
                                        "description": "G-RUTA/DATOS",
                                        "type": "string",
                                        "example": "G-RUTA/DATOS"
                                    },
                                    "typeConcept": {
                                        "description": "Ingres/Egreso",
                                        "type": "string",
                                        "example": "Ingreso/Egreso"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ExpensesConcept created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExpensesConcept"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some Fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/expensesConcept/{id}": {
            "get": {
                "tags": [
                    "ExpensesConcept"
                ],
                "summary": "Get a expenses Concept by ID",
                "description": "Retrieve a expenses Concept by its ID",
                "operationId": "59a1ef9d1f7b0390bd43692d8e8b4e8b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the expenses Concept to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ExpensesConcept found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExpensesConcept"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "ExpensesConcept"
                ],
                "summary": "Update an existing ExpensesConcept",
                "description": "Update an existing ExpensesConcept",
                "operationId": "a1d37bf4c1e0b72abd1ba6c036034355",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the ExpensesConcept to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Client data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name ExpensesConcept",
                                        "type": "string",
                                        "example": "concepto 1"
                                    },
                                    "type": {
                                        "description": "G-RUTA/DATOS",
                                        "type": "string",
                                        "example": "G-RUTA/DATOS"
                                    },
                                    "typeConcept": {
                                        "description": "Ingres/Egreso",
                                        "type": "string",
                                        "example": "Ingreso/Egreso"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Client updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExpensesConcept"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "ExpensesConcept"
                ],
                "summary": "Delete a ExpensesConcept",
                "description": "Delete a ExpensesConcept by ID",
                "operationId": "b001d546ae8650d2a4a7d85db2a6b0e4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the ExpensesConcept to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ExpensesConcept deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/installment": {
            "get": {
                "tags": [
                    "Installment"
                ],
                "summary": "Get all Installments",
                "description": "Retrieve all installments with optional filters for 'status' and 'person_id'. Includes related 'moviment' and 'payInstallments' information. Results are paginated.",
                "operationId": "31ac15fd242b2538c0f4fca41686cd5a",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter installments by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "active"
                        }
                    },
                    {
                        "name": "person_id",
                        "in": "query",
                        "description": "Filter installments by the ID of the person associated with the movement",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Installments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Installment"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/installment?page=1"
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/installment?page=2"
                                        },
                                        "path": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/installment"
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "example": "null"
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 15
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Internal Server Error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/installment/{id}/pay": {
            "put": {
                "tags": [
                    "Installment"
                ],
                "summary": "Pay an installment",
                "description": "Process a payment for a specific installment",
                "operationId": "d47f34e4129cf7d8f67a86d3a4815423",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the installment to pay",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payment details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "paymentDate": {
                                        "description": "Date of payment",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-09-02"
                                    },
                                    "yape": {
                                        "description": "Amount paid via Yape",
                                        "type": "number",
                                        "format": "float",
                                        "example": 20,
                                        "nullable": true
                                    },
                                    "deposit": {
                                        "description": "Amount paid via deposit",
                                        "type": "number",
                                        "format": "float",
                                        "example": 30,
                                        "nullable": true
                                    },
                                    "cash": {
                                        "description": "Amount paid in cash",
                                        "type": "number",
                                        "format": "float",
                                        "example": 50,
                                        "nullable": true
                                    },
                                    "card": {
                                        "description": "Amount paid via card",
                                        "type": "number",
                                        "format": "float",
                                        "example": 0.5,
                                        "nullable": true
                                    },
                                    "plin": {
                                        "description": "Amount paid via Plin",
                                        "type": "number",
                                        "format": "float",
                                        "example": 50,
                                        "nullable": true
                                    },
                                    "comment": {
                                        "description": "Comment on the payment",
                                        "type": "string",
                                        "example": "Pago parcial",
                                        "nullable": true
                                    },
                                    "installment_id": {
                                        "description": "ID of the installment being paid",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "number": {
                                            "type": "string",
                                            "example": "CC01-00000001"
                                        },
                                        "paymentDate": {
                                            "type": "string",
                                            "example": "2024-09-02"
                                        },
                                        "total": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 150.5
                                        },
                                        "yape": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 20
                                        },
                                        "deposit": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 30
                                        },
                                        "cash": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 50
                                        },
                                        "card": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 0.5
                                        },
                                        "plin": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 50
                                        },
                                        "comment": {
                                            "type": "string",
                                            "example": "Pago parcial"
                                        },
                                        "installment_id": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Installment No Encontrado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/modelFunctional": {
            "get": {
                "tags": [
                    "ModelFunctional"
                ],
                "summary": "Get all modelFunctional",
                "description": "Show all modelFunctional",
                "operationId": "6fce7078857898e8434eaa6e24f75929",
                "responses": {
                    "200": {
                        "description": "List of modelFunctional",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Model_functional"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "ModelFunctional"
                ],
                "summary": "Store a new modelFunctional",
                "description": "Create a new modelFunctional",
                "operationId": "20d70d8d2772ba04c6e15aebe799a80b",
                "requestBody": {
                    "description": "ModelFunctional data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Model Functional",
                                        "type": "string",
                                        "example": "Model Functional"
                                    },
                                    "abbreviation": {
                                        "description": "abbreviation",
                                        "type": "string",
                                        "example": "abbreviation"
                                    },
                                    "reference": {
                                        "description": "reference",
                                        "type": "string",
                                        "example": "reference"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ModelFunctional created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Model_functional"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some Fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/modelFunctional/{id}": {
            "get": {
                "tags": [
                    "ModelFunctional"
                ],
                "summary": "Get a modelFunctional by ID",
                "description": "Retrieve a modelFunctional by its ID",
                "operationId": "b2857097755b1024bf2a97077bd0fde9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the modelFunctional to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ModelFunctional found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Model_functional"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "ModelFunctional"
                ],
                "summary": "Update an existing Model_functional",
                "description": "Update an existing Model_functional",
                "operationId": "3246eaa082f0a88e486e5545fbf918ba",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Model_functional to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Model_functional data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Model Functional",
                                        "type": "string",
                                        "example": "Model_functional2"
                                    },
                                    "abbreviation": {
                                        "description": "abbreviation",
                                        "type": "string",
                                        "example": "abbreviation"
                                    },
                                    "reference": {
                                        "description": "reference",
                                        "type": "string",
                                        "example": "reference"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Client updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Model_functional"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "ModelFunctional"
                ],
                "summary": "Delete a ModelFunctional",
                "description": "Delete a ModelFunctional by ID",
                "operationId": "f044b9b59b23b73ca347caeadfe3bf53",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the ModelFunctional to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Model_functional deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/motive": {
            "get": {
                "tags": [
                    "Motive"
                ],
                "summary": "Get all motives with pagination",
                "operationId": "875bca3b565370547676c29e31bac8c5",
                "responses": {
                    "200": {
                        "description": "List of active motives",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Motive"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/motive?page=1"
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/motive?page=2"
                                        },
                                        "path": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/motive"
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "example": "null"
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 15
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/motive/{id}": {
            "get": {
                "tags": [
                    "Motive"
                ],
                "summary": "Display the specified motive.",
                "operationId": "5aa198fadb1e87d9cb3187a5bb68952d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Motive ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Motive found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Motive"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Motive not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Motive not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/moviment": {
            "get": {
                "tags": [
                    "Moviment"
                ],
                "summary": "Get all Movimentes",
                "operationId": "716cbcd8940abc3add9580602ce1669b",
                "parameters": [
                    {
                        "name": "box_id",
                        "in": "query",
                        "description": "ID of the box to filter the Movimentes",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of active Movimentes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "detalle": {
                                            "properties": {
                                                "MovCajaApertura": {
                                                    "$ref": "#/components/schemas/MovimentRequest"
                                                },
                                                "MovCajaCierre": {
                                                    "$ref": "#/components/schemas/MovimentRequest"
                                                },
                                                "MovCajaInternos": {
                                                    "properties": {
                                                        "current_page": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "data": {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/components/schemas/MovimentRequest"
                                                            }
                                                        },
                                                        "first_page_url": {
                                                            "type": "string",
                                                            "example": "http://localhost/transportev2/public/api/moviment?page=1"
                                                        },
                                                        "from": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "next_page_url": {
                                                            "type": "string",
                                                            "example": "null"
                                                        },
                                                        "path": {
                                                            "type": "string",
                                                            "example": "http://localhost/transportev2/public/api/moviment"
                                                        },
                                                        "per_page": {
                                                            "type": "integer",
                                                            "example": 15
                                                        },
                                                        "prev_page_url": {
                                                            "type": "string",
                                                            "example": "null"
                                                        },
                                                        "to": {
                                                            "type": "integer",
                                                            "example": 2
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "resumenCaja": {
                                                    "properties": {
                                                        "total_ingresos": {
                                                            "type": "string",
                                                            "example": "150.50"
                                                        },
                                                        "total_egresos": {
                                                            "type": "string",
                                                            "example": "150.50"
                                                        },
                                                        "efectivo_ingresos": {
                                                            "type": "string",
                                                            "example": "50.00"
                                                        },
                                                        "efectivo_egresos": {
                                                            "type": "string",
                                                            "example": "50.00"
                                                        },
                                                        "yape_ingresos": {
                                                            "type": "string",
                                                            "example": "20.00"
                                                        },
                                                        "yape_egresos": {
                                                            "type": "string",
                                                            "example": "20.00"
                                                        },
                                                        "plin_ingresos": {
                                                            "type": "string",
                                                            "example": "0.00"
                                                        },
                                                        "plin_egresos": {
                                                            "type": "string",
                                                            "example": "50.00"
                                                        },
                                                        "tarjeta_ingresos": {
                                                            "type": "string",
                                                            "example": "0.50"
                                                        },
                                                        "tarjeta_egresos": {
                                                            "type": "string",
                                                            "example": "0.50"
                                                        },
                                                        "deposito_ingresos": {
                                                            "type": "string",
                                                            "example": "30.00"
                                                        },
                                                        "deposito_egresos": {
                                                            "type": "string",
                                                            "example": "30.00"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Moviment"
                ],
                "summary": "Store a new moviment",
                "description": "Create a new moviment",
                "operationId": "de74d596f4765873a95776628984cfdc",
                "requestBody": {
                    "description": "Moviment data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "paymentDate": {
                                        "description": "Fecha de pago",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2023-06-17",
                                        "nullable": true
                                    },
                                    "paymentConcept_id": {
                                        "description": "ID del concepto de pago",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "yape": {
                                        "description": "Pago por Yape",
                                        "type": "number",
                                        "format": "float",
                                        "example": 20,
                                        "nullable": true
                                    },
                                    "deposit": {
                                        "description": "Depósito",
                                        "type": "number",
                                        "format": "float",
                                        "example": 30,
                                        "nullable": true
                                    },
                                    "cash": {
                                        "description": "Efectivo",
                                        "type": "number",
                                        "format": "float",
                                        "example": 50,
                                        "nullable": true
                                    },
                                    "card": {
                                        "description": "Pago por tarjeta",
                                        "type": "number",
                                        "format": "float",
                                        "example": 0.5,
                                        "nullable": true
                                    },
                                    "plin": {
                                        "description": "Pago por Plin",
                                        "type": "number",
                                        "format": "float",
                                        "example": 50,
                                        "nullable": true
                                    },
                                    "comment": {
                                        "description": "Comentario",
                                        "type": "string",
                                        "example": "Pago parcial",
                                        "nullable": true
                                    },
                                    "typeDocument": {
                                        "description": "Tipo de documento",
                                        "type": "string",
                                        "example": "F",
                                        "nullable": true
                                    },
                                    "typePayment": {
                                        "description": "Contado / Crédito",
                                        "type": "string",
                                        "example": "Contado",
                                        "nullable": true
                                    },
                                    "typeSale": {
                                        "description": "Normal / Detracción",
                                        "type": "string",
                                        "example": "Estandar",
                                        "nullable": true
                                    },
                                    "programming_id": {
                                        "description": "ID de programación",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "box_id": {
                                        "description": "ID de la caja",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "branchOffice_id": {
                                        "description": "ID de la sucursal",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "reception_id": {
                                        "description": "ID de la recepción",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "person_id": {
                                        "description": "ID de la persona",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "installment": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "date": {
                                                    "type": "string",
                                                    "format": "date",
                                                    "example": "2023-06-17"
                                                },
                                                "total": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": "100"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Moviment created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MovimentRequest"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/moviment/{id}": {
            "get": {
                "tags": [
                    "Moviment"
                ],
                "summary": "Get a moviment by ID",
                "description": "Retrieve a moviment by its ID",
                "operationId": "53c78e0f59aff13de9242b7b52a78db0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the moviment to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Moviment found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MovimentRequest"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "moviment"
                ],
                "summary": "Delete a moviment",
                "description": "Delete a moviment by ID",
                "operationId": "9fb073df99c43294d6920055ed30092b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the moviment to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Model_functional deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/moviment/last/{idBox}": {
            "get": {
                "tags": [
                    "Moviment"
                ],
                "summary": "Get the last moviment with paymentConcept_id = 2",
                "description": "Retrieve the last moviment with paymentConcept_id = 2 for a specific box",
                "operationId": "debfb910fdf7f0ec0f08d180209e90bc",
                "parameters": [
                    {
                        "name": "idBox",
                        "in": "path",
                        "description": "ID of the box",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Moviment found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MovimentRequest"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Moviment not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/movimentAperturaCierre": {
            "post": {
                "tags": [
                    "Moviment"
                ],
                "summary": "Store a new moviment",
                "description": "Create a new moviment Apertura/Cierre",
                "operationId": "74fb9411cf7ea456b650be9030069f7d",
                "requestBody": {
                    "description": "Moviment data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "paymentDate": {
                                        "description": "Fecha de pago",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2023-06-17",
                                        "nullable": true
                                    },
                                    "paymentConcept_id": {
                                        "description": "ID del concepto de pago",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "yape": {
                                        "description": "Pago por Yape",
                                        "type": "number",
                                        "format": "decimal",
                                        "example": 20,
                                        "nullable": true
                                    },
                                    "deposit": {
                                        "description": "Depósito",
                                        "type": "number",
                                        "format": "decimal",
                                        "example": 30,
                                        "nullable": true
                                    },
                                    "cash": {
                                        "description": "Efectivo",
                                        "type": "number",
                                        "format": "decimal",
                                        "example": 50,
                                        "nullable": true
                                    },
                                    "plin": {
                                        "description": "Efectivo",
                                        "type": "number",
                                        "format": "decimal",
                                        "example": 50,
                                        "nullable": true
                                    },
                                    "card": {
                                        "description": "Pago por tarjeta",
                                        "type": "number",
                                        "format": "decimal",
                                        "example": 0.5,
                                        "nullable": true
                                    },
                                    "comment": {
                                        "description": "Comentario",
                                        "type": "string",
                                        "example": "Pago parcial",
                                        "nullable": true
                                    },
                                    "box_id": {
                                        "description": "ID de la caja",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "branchOffice_id": {
                                        "description": "ID de la sucursal",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "person_id": {
                                        "description": "ID de la persona",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Moviment created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MovimentRequest"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/validateBox/{id}": {
            "get": {
                "tags": [
                    "Moviment"
                ],
                "summary": "Get a Moviment",
                "description": "Get a Moviment by ID",
                "operationId": "9ba46741acbf869f24647df445bac55f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Moviment to Get",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Moviment retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "description": "Moviment details",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict: Existing open box",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Existe una caja aperturada, aperturada el día: YYYY-MM-DD"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/showAperturaMovements": {
            "get": {
                "tags": [
                    "Moviment"
                ],
                "summary": "Listado de Aperturas",
                "description": "Por cada apertura, muestra su reporte con un filtro opcional por fechas basado en el campo created_at.",
                "operationId": "3b5818d400b005516f264e6533a0d1f9",
                "parameters": [
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Fecha de inicio para filtrar los movimientos (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Fecha de fin para filtrar los movimientos (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movimientos obtenidos con éxito.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MovimentRequest"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Movements not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "No autenticado.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/paymentConcept": {
            "get": {
                "tags": [
                    "PaymentConcept"
                ],
                "summary": "Get all PaymentConcepts",
                "operationId": "a8aeec51baa1a90f19e6053b616549d6",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filtrar por tipo de concepto de pago: Ingreso o Egreso",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Ingreso",
                                "Egreso"
                            ],
                            "example": "Ingreso"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of active PaymentConcepts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PaymentConcept"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/paymentConcept?page=1"
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/paymentConcept?page=2"
                                        },
                                        "path": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/paymentConcept"
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "example": "null"
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 15
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "PaymentConcept"
                ],
                "summary": "Store a new paymentConcept",
                "description": "Create a new paymentConcept",
                "operationId": "ec2e8a83c80e0fed2b3ccd94fe60dc40",
                "requestBody": {
                    "description": "PaymentConcept data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name PaymentConcept",
                                        "type": "string",
                                        "example": "Gasto Luz"
                                    },
                                    "type": {
                                        "description": "type",
                                        "type": "string",
                                        "example": "Egreso"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "PaymentConcept created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PaymentConcept"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some Fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/paymentConcept/{id}": {
            "get": {
                "tags": [
                    "PaymentConcept"
                ],
                "summary": "Get a paymentConcept by ID",
                "description": "Retrieve a paymentConcept by its ID",
                "operationId": "c3307432657f58c6dae97a9be7f351f9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the paymentConcept to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PaymentConcept found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentConcept"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "PaymentConcept"
                ],
                "summary": "Update an existing PaymentConcept",
                "description": "Update an existing PaymentConcept",
                "operationId": "ce839a621f7addfd544997cb78f2ff77",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the PaymentConcept to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "PaymentConcept data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name PaymentConcept",
                                        "type": "string",
                                        "example": "Gasto Luz"
                                    },
                                    "type": {
                                        "description": "type",
                                        "type": "string",
                                        "example": "Egreso"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "PaymentConcept updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PaymentConcept"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "PaymentConcept"
                ],
                "summary": "Delete a PaymentConcept",
                "description": "Delete a PaymentConcept by ID",
                "operationId": "ab5624510570cecf53b420cfcd37f0d5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the PaymentConcept to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PaymentConcept deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/saveguia/{id}": {
            "get": {
                "tags": [
                    "CarrierGuide"
                ],
                "summary": "Exportar Guía Transportista",
                "description": "Genera y descarga una Guía Transportista en formato PDF",
                "operationId": "89f32ab316bb5a702d54c63141caf4d5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID de la Guía Transportista",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guía Transportista en formato PDF",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error en los datos",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Error en los datos"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/manifiesto/{id}": {
            "get": {
                "tags": [
                    "Report"
                ],
                "summary": "Exportar Manifiesto",
                "description": "Genera y descarga una Manifiesto en formato PDF",
                "operationId": "bc42d94abcac3b290a1e885e41edbc5a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID de la Programación",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Manifiesto en formato PDF",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error en los datos",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Error en los datos"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/reportCaja": {
            "get": {
                "tags": [
                    "Report"
                ],
                "summary": "Exportar Reporte Caja",
                "description": "Genera y descarga una Reporte Caja Aperturada en formato PDF",
                "operationId": "8c7321f3c19d0321bfd560fe7d4281b9",
                "responses": {
                    "200": {
                        "description": "Reporte Caja en formato PDF",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error en los datos",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Error en los datos"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/reportCajaExcel": {
            "get": {
                "tags": [
                    "Report"
                ],
                "summary": "Exportar Reporte Caja a Excel",
                "description": "Genera y descarga un Reporte de Caja Aperturada en formato EXCEL",
                "operationId": "267081941bb869abe20e3292ba030eed",
                "responses": {
                    "200": {
                        "description": "Reporte de Caja en formato EXCEL",
                        "content": {
                            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error en los datos",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Error en los datos"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Movimiento de Caja no encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Movimiento de Caja no encontrado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/clients": {
            "get": {
                "tags": [
                    "Clients"
                ],
                "summary": "Get all clients",
                "description": "Show all clients",
                "operationId": "05cd167347eee9b8a8f0f77d432e4e3a",
                "responses": {
                    "200": {
                        "description": "List of clients",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Person"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Clients"
                ],
                "summary": "Store a new client",
                "description": "Create a new client",
                "operationId": "0a204cfe733a7a68b28fd2a9933539f5",
                "requestBody": {
                    "description": "Client data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "typeofDocument": {
                                        "description": "Type of Document",
                                        "type": "string",
                                        "example": "dni"
                                    },
                                    "documentNumber": {
                                        "description": "Document Number",
                                        "type": "string",
                                        "example": "75247586"
                                    },
                                    "names": {
                                        "description": "Names",
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "fatherSurname": {
                                        "description": "Father's Surname",
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "motherSurname": {
                                        "description": "Mother's Surname",
                                        "type": "string",
                                        "example": "Smith"
                                    },
                                    "birthDate": {
                                        "description": "Birth Date",
                                        "type": "string",
                                        "format": "date",
                                        "example": "1990-01-01"
                                    },
                                    "address": {
                                        "description": "Address",
                                        "type": "string",
                                        "example": "123 Main Street"
                                    },
                                    "telephone": {
                                        "description": "Telephone",
                                        "type": "string",
                                        "example": "123-456-7890"
                                    },
                                    "email": {
                                        "description": "Email",
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "businessName": {
                                        "description": "Business Name",
                                        "type": "string",
                                        "example": null
                                    },
                                    "comercialName": {
                                        "description": "Commercial Name",
                                        "type": "string",
                                        "example": null
                                    },
                                    "fiscalAddress": {
                                        "description": "Fiscal Address",
                                        "type": "string",
                                        "example": null
                                    },
                                    "branch_office_id": {
                                        "description": "ID Branch Office",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "representativePersonDni": {
                                        "description": "Representative Person DNI",
                                        "type": "string",
                                        "example": null
                                    },
                                    "representativePersonName": {
                                        "description": "Representative Person Name",
                                        "type": "string",
                                        "example": null
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Client created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Person"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some Fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/naturalPerson": {
            "get": {
                "tags": [
                    "Clients"
                ],
                "summary": "Get all Natural People",
                "description": "Show all Natural People",
                "operationId": "e64be8405af7a65999c7fd3bc739c165",
                "responses": {
                    "200": {
                        "description": "List of Natural People",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Person"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/legalEntity": {
            "get": {
                "tags": [
                    "Clients"
                ],
                "summary": "Get all Legal Entities",
                "description": "Show all Legal Entities",
                "operationId": "30649a28a93e3c2631f7f895b2cf7828",
                "responses": {
                    "200": {
                        "description": "List of Legal Entities",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Person"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/clients/{id}": {
            "get": {
                "tags": [
                    "Clients"
                ],
                "summary": "Get a client by ID",
                "description": "Retrieve a client by its ID",
                "operationId": "b1d9a1e60e7c3b204f76de227c4e00e4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the client to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cliente encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Clients"
                ],
                "summary": "Update an existing client",
                "description": "Update an existing client",
                "operationId": "3321f928bf159bf5b0d79ab7c093680b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the client to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Client data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "typeofDocument": {
                                        "description": "Type of Document",
                                        "type": "string",
                                        "example": "dni"
                                    },
                                    "branch_office_id": {
                                        "description": "ID Branch Office",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "documentNumber": {
                                        "description": "Document Number",
                                        "type": "string",
                                        "example": "75247586"
                                    },
                                    "names": {
                                        "description": "Names",
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "fatherSurname": {
                                        "description": "Father's Surname",
                                        "type": "string",
                                        "example": "Doe 2"
                                    },
                                    "motherSurname": {
                                        "description": "Mother's Surname",
                                        "type": "string",
                                        "example": "Smith 2"
                                    },
                                    "birthDate": {
                                        "description": "Birth Date",
                                        "type": "string",
                                        "format": "date",
                                        "example": "1990-01-01"
                                    },
                                    "address": {
                                        "description": "Address",
                                        "type": "string",
                                        "example": "123 Main Street"
                                    },
                                    "telephone": {
                                        "description": "Telephone",
                                        "type": "string",
                                        "example": "123-456-7890"
                                    },
                                    "email": {
                                        "description": "Email",
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "businessName": {
                                        "description": "Business Name",
                                        "type": "string",
                                        "example": null
                                    },
                                    "comercialName": {
                                        "description": "Commercial Name",
                                        "type": "string",
                                        "example": null
                                    },
                                    "fiscalAddress": {
                                        "description": "Fiscal Address",
                                        "type": "string",
                                        "example": null
                                    },
                                    "representativePersonDni": {
                                        "description": "Representative Person DNI",
                                        "type": "string",
                                        "example": null
                                    },
                                    "representativePersonName": {
                                        "description": "Representative Person Name",
                                        "type": "string",
                                        "example": null
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Client updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Person"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Clients"
                ],
                "summary": "Delete a client",
                "description": "Delete a client by ID",
                "operationId": "38cbc0a8bc3e8177c785365bb0a4b8d7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the client to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/clients/{id}/changeState": {
            "put": {
                "tags": [
                    "Clients"
                ],
                "summary": "Change the state of a client",
                "description": "Change the state (active/inactive) of a client by its ID",
                "operationId": "5e7ea0fbe3e918ec5597bc1ac161c795",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the client to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "State of the client changed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "New state of the client (1 for active, 0 for inactive)",
                                    "type": "boolean"
                                },
                                "example": true
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/personsWithDebt": {
            "get": {
                "tags": [
                    "Clients"
                ],
                "summary": "Get Persons with Debt",
                "description": "Retrieve all Persons who have receptions with debt amounts greater than 0, optionally filtered by 'conditionPay'. Includes the related receptions.",
                "operationId": "837e3b695f6626e845f4276ab77a365f",
                "parameters": [
                    {
                        "name": "conditionPay",
                        "in": "query",
                        "description": "Filter persons by the condition of payment. If not provided, all persons with debt will be returned.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "Pendiente"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of persons with their debt receptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "John Doe"
                                            },
                                            "receptionsWithDebt": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/Reception"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "An error occurred while retrieving data."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/place": {
            "get": {
                "tags": [
                    "Place"
                ],
                "summary": "Get all Place",
                "description": "Show all Place",
                "operationId": "bf569bd461cbf2b64140369d365caed2",
                "responses": {
                    "200": {
                        "description": "List of Place"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Place"
                ],
                "summary": "Store a new place",
                "description": "Create a new place",
                "operationId": "735b1d56c5941386bd2ef9f7fcb3e77c",
                "requestBody": {
                    "description": "Place data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the place",
                                        "type": "string",
                                        "example": "Direccion 1"
                                    },
                                    "address": {
                                        "description": "Address of the place",
                                        "type": "string",
                                        "example": "123 Main St"
                                    },
                                    "district_id": {
                                        "description": "ID of the district",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Place created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Place"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Some Fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/place/{id}": {
            "get": {
                "tags": [
                    "Place"
                ],
                "summary": "Get a place by ID",
                "description": "Retrieve a place by its ID",
                "operationId": "019570fc693ea8c4748aa25e72c36085",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the place to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Place encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Place"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Place"
                ],
                "summary": "Update an existing place",
                "description": "Update an existing place",
                "operationId": "62c68468fd349545ca6fbbc7868f5884",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the place to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Place data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the place",
                                        "type": "string",
                                        "example": "Direccion 1"
                                    },
                                    "address": {
                                        "description": "Address of the place",
                                        "type": "string",
                                        "example": "123 Main St"
                                    },
                                    "district_id": {
                                        "description": "ID of the district",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Place updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Place"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Place not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Place not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Place"
                ],
                "summary": "Delete a place",
                "description": "Delete a place by ID",
                "operationId": "0e553a48537a39ef8ee970ddb8e7deb0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the place to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Place deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/programming": {
            "get": {
                "tags": [
                    "Programming"
                ],
                "summary": "Get all programming",
                "description": "Show all programming",
                "operationId": "59d9af008b5227945de979e712e703bc",
                "responses": {
                    "200": {
                        "description": "List of programming"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Programming"
                ],
                "summary": "Create a new programming",
                "description": "Create a new programming",
                "operationId": "18812a1bacf047e1a4b0cfcf64998860",
                "requestBody": {
                    "description": "Pogramming data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "departureDate": {
                                        "description": "Subcontrato",
                                        "type": "integer",
                                        "example": "2024-05-08"
                                    },
                                    "estimatedArrivalDate": {
                                        "description": "Fecha de inicio de transferencia",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-05-08"
                                    },
                                    "tract_id": {
                                        "description": "ID del tracto",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "platform_id": {
                                        "description": "ID de la plataforma",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "origin_id": {
                                        "description": "ID de origen",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "destination_id": {
                                        "description": "ID de destino",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "branch_office_id": {
                                        "description": "ID Branch Office",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "driver_id": {
                                        "description": "ID driver",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "copilot_id": {
                                        "description": "ID copilot",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "assistant1_id": {
                                        "description": "ID assistant 1",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "assistant2_id": {
                                        "description": "ID assistant 2",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "assistant3_id": {
                                        "description": "ID assistant 3",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "assistant4_id": {
                                        "description": "ID assistant 4",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "isload": {
                                        "description": "isload",
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "detailsReceptions": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "idDetail": {
                                                    "type": "integer",
                                                    "example": "1"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Programming created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Programming created successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error: The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/programming/{id}": {
            "get": {
                "tags": [
                    "Programming"
                ],
                "summary": "Get a programming by ID",
                "description": "Retrieve a programming by its ID",
                "operationId": "2df3786ce248d90775179115629ec653",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the programming to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Programming found"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Programming"
                ],
                "summary": "Update an existing programming",
                "description": "Update an existing programming",
                "operationId": "06662721da938702553620f607cd2e5c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the programming to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Pogramming data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "departureDate": {
                                        "description": "Subcontrato",
                                        "type": "integer",
                                        "example": "2024-05-08"
                                    },
                                    "estimatedArrivalDate": {
                                        "description": "Fecha de inicio de transferencia",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-05-08"
                                    },
                                    "tract_id": {
                                        "description": "ID del tracto",
                                        "type": "integer",
                                        "example": null
                                    },
                                    "platform_id": {
                                        "description": "ID de la plataforma",
                                        "type": "integer",
                                        "example": null
                                    },
                                    "origin_id": {
                                        "description": "ID de origen",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "destination_id": {
                                        "description": "ID de destino",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "branch_office_id": {
                                        "description": "ID Branch Office",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "driver_id": {
                                        "description": "ID driver",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "copilot_id": {
                                        "description": "ID copilot",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "assistant1_id": {
                                        "description": "ID assistant 1",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "assistant2_id": {
                                        "description": "ID assistant 2",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "assistant3_id": {
                                        "description": "ID assistant 3",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "assistant4_id": {
                                        "description": "ID assistant 4",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "isload": {
                                        "description": "isload",
                                        "type": "integer",
                                        "example": 0
                                    },
                                    "detailsReceptions": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "idDetail": {
                                                    "type": "integer",
                                                    "example": "1"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Programming updated successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Programming"
                ],
                "summary": "Delete a Programming",
                "description": "Delete a Programming by ID",
                "operationId": "f5bf4836bcadb9d67835a737233e4634",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Programming to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Programming deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/reprogramming/{id}": {
            "post": {
                "tags": [
                    "Programming"
                ],
                "summary": "reprogram an existing programming",
                "description": "reprogram an existing programming",
                "operationId": "1c10c37d5fbc252f26df8797a53d9011",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the programming to reprogram",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Pogramming data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "estimatedArrivalDate": {
                                        "description": "Fecha de inicio de transferencia",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-05-08"
                                    },
                                    "destination_id": {
                                        "description": "ID de destino",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "branch_office_id": {
                                        "description": "ID Branch Office",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Programming  successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/finishProgramming/{id}": {
            "put": {
                "tags": [
                    "Programming"
                ],
                "summary": "Get a programming by ID",
                "description": "Retrieve a programming by its ID and mark it as finished",
                "operationId": "1c4b6bdb8d587f7c5166cce3462f54e0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the programming to retrieve and mark as finished",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Programming found and marked as finished",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "Finalizado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Programming not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Programming not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/reception": {
            "get": {
                "tags": [
                    "Reception"
                ],
                "summary": "Get all reception",
                "description": "Show all reception",
                "operationId": "fdcf4b86743a4bc6d51fee352365f8cd",
                "parameters": [
                    {
                        "name": "startPlace_id",
                        "in": "query",
                        "description": "ID of the start place",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "endPlace_id",
                        "in": "query",
                        "description": "ID of the end place",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 2
                        }
                    },
                    {
                        "name": "branch_office_id",
                        "in": "query",
                        "description": "ID of the branch office",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 3
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of reception"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Reception"
                ],
                "summary": "Create a new reception",
                "description": "Create a new reception",
                "operationId": "f975c08f2e0aa0d6ce220e37cdcfdd52",
                "requestBody": {
                    "description": "Reception data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "typeService": {
                                        "description": "Type of service",
                                        "type": "string",
                                        "example": "Type of service"
                                    },
                                    "typeDelivery": {
                                        "description": "Type of delivery",
                                        "type": "string",
                                        "example": "Type of delivery"
                                    },
                                    "conditionPay": {
                                        "description": "Payment condition",
                                        "type": "string",
                                        "example": "Payment condition"
                                    },
                                    "numberDays": {
                                        "description": "Days",
                                        "type": "integer",
                                        "example": "3"
                                    },
                                    "creditAmount": {
                                        "description": "Amount Credit",
                                        "type": "decimal",
                                        "example": "100"
                                    },
                                    "comment": {
                                        "description": "Comment",
                                        "type": "string",
                                        "example": "Documents Anexos"
                                    },
                                    "tokenResponsible": {
                                        "description": "Token",
                                        "type": "string",
                                        "example": "token123"
                                    },
                                    "address": {
                                        "description": "Address",
                                        "type": "string",
                                        "example": "address1"
                                    },
                                    "paymentAmount": {
                                        "description": "Payment amount",
                                        "type": "string",
                                        "example": 100
                                    },
                                    "receptionDate": {
                                        "description": "Reception date",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-05-08"
                                    },
                                    "transferLimitDate": {
                                        "description": "Transfer limit date",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-05-10"
                                    },
                                    "origin_id": {
                                        "description": "Origin ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "destination_id": {
                                        "description": "Destination ID",
                                        "type": "integer",
                                        "example": "2"
                                    },
                                    "sender_id": {
                                        "description": "Sender ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "recipient_id": {
                                        "description": "Recipient ID",
                                        "type": "integer",
                                        "example": "2"
                                    },
                                    "pickupResponsible_id": {
                                        "description": "Pickup Responsible ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "payResponsible_id": {
                                        "description": "Pay Responsible ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "type_responsiblePay": {
                                        "description": "Who pay reception",
                                        "type": "string",
                                        "example": "Remitente"
                                    },
                                    "seller_id": {
                                        "description": "Seller ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "pointDestination_id": {
                                        "description": "Point Destination ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "branch_office_id": {
                                        "description": "ID Branch Office",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "office_id": {
                                        "description": "ID Branch Office",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "pointSender_id": {
                                        "description": "Point Sender ID",
                                        "type": "integer",
                                        "example": "2"
                                    },
                                    "details": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "description": {
                                                    "type": "string",
                                                    "example": "Descripción"
                                                },
                                                "weight": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 0
                                                },
                                                "paymentAmount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 0
                                                },
                                                "comissionAmount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 0
                                                },
                                                "comissionAgent_id": {
                                                    "type": "integer",
                                                    "example": null
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Reception created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Reception created successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error: The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/reception/{id}": {
            "get": {
                "tags": [
                    "Reception"
                ],
                "summary": "Get a reception by ID",
                "description": "Retrieve a reception by its ID",
                "operationId": "0b96fe94a50d4aa6c816638ee2851a48",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the reception to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reception encontrado"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Reception"
                ],
                "summary": "Update an existing reception",
                "description": "Update an existing reception",
                "operationId": "597eac3c7be834e2002ee7e41209f7b6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the reception to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Reception data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "typeService": {
                                        "description": "Type of service",
                                        "type": "string",
                                        "example": "Type of service"
                                    },
                                    "typeDelivery": {
                                        "description": "Type of delivery",
                                        "type": "string",
                                        "example": "Type of delivery"
                                    },
                                    "conditionPay": {
                                        "description": "Payment condition",
                                        "type": "string",
                                        "example": "Payment condition"
                                    },
                                    "numberDays": {
                                        "description": "Days",
                                        "type": "integer",
                                        "example": "3"
                                    },
                                    "creditAmount": {
                                        "description": "Amount Credit",
                                        "type": "decimal",
                                        "example": "100"
                                    },
                                    "comment": {
                                        "description": "Comment",
                                        "type": "string",
                                        "example": "Documents Anexos"
                                    },
                                    "paymentAmount": {
                                        "description": "Payment amount",
                                        "type": "string",
                                        "example": 100
                                    },
                                    "receptionDate": {
                                        "description": "Reception date",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-05-08"
                                    },
                                    "transferLimitDate": {
                                        "description": "Transfer limit date",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-05-10"
                                    },
                                    "origin_id": {
                                        "description": "Origin ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "destination_id": {
                                        "description": "Destination ID",
                                        "type": "integer",
                                        "example": "2"
                                    },
                                    "sender_id": {
                                        "description": "Sender ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "recipient_id": {
                                        "description": "Recipient ID",
                                        "type": "integer",
                                        "example": "2"
                                    },
                                    "pickupResponsible_id": {
                                        "description": "Pickup Responsible ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "tokenResponsible": {
                                        "description": "Token",
                                        "type": "string",
                                        "example": "token123"
                                    },
                                    "address": {
                                        "description": "Address",
                                        "type": "string",
                                        "example": "address1"
                                    },
                                    "payResponsible_id": {
                                        "description": "Pay Responsible ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "type_responsiblePay": {
                                        "description": "Who pay reception",
                                        "type": "string",
                                        "example": "Remitente"
                                    },
                                    "branch_office_id": {
                                        "description": "ID Branch Office",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "office_id": {
                                        "description": "ID Branch Office",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "seller_id": {
                                        "description": "Seller ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "pointDestination_id": {
                                        "description": "Point Destination ID",
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "pointSender_id": {
                                        "description": "Point Sender ID",
                                        "type": "integer",
                                        "example": "2"
                                    },
                                    "details": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "idDetail": {
                                                    "type": "string",
                                                    "example": "1"
                                                },
                                                "description": {
                                                    "type": "string",
                                                    "example": "Descripción"
                                                },
                                                "weight": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 0
                                                },
                                                "paymentAmount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 0
                                                },
                                                "comissionAmount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 0
                                                },
                                                "comissionAgent_id": {
                                                    "type": "integer",
                                                    "example": null
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Reception updated successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Reception"
                ],
                "summary": "Delete a reception",
                "description": "Delete a reception by ID",
                "operationId": "7f203350897a691337331d2bc42b14f2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the reception to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reception deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/routes": {
            "get": {
                "tags": [
                    "Routes"
                ],
                "summary": "Get all routes",
                "description": "Show all routes",
                "operationId": "65ce6f590d5a5b2bca40eb4e12a0eeb5",
                "responses": {
                    "200": {
                        "description": "List of routes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Route"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Routes"
                ],
                "summary": "Create a new route",
                "description": "Store a new route in the system and assign a parent route to specified routes.",
                "operationId": "5431f25a213cd400e876b9be2c2aba2c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "placeStart_id",
                                    "placeEnd_id",
                                    "routes"
                                ],
                                "properties": {
                                    "placeStart_id": {
                                        "description": "ID of the starting place",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "placeEnd_id": {
                                        "description": "ID of the ending place",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "routes": {
                                        "type": "array",
                                        "items": {
                                            "description": "Array of route IDs to be assigned as child routes",
                                            "type": "integer",
                                            "example": 4
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Route created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Route"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The placeStart_id field is required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/routesFather": {
            "get": {
                "tags": [
                    "Routes"
                ],
                "summary": "Get all parent routes",
                "description": "MUESTRA LOS QUE TIENEN GRUPO",
                "operationId": "41c41a8e98df96e812fc7592a44a9ff5",
                "responses": {
                    "200": {
                        "description": "List of parent routes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Route"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/routes/{id}": {
            "get": {
                "tags": [
                    "Routes"
                ],
                "summary": "Get a specific route by ID",
                "description": "Show details of a specific route",
                "operationId": "90a341d1e0a3ca0022e91a84ef99cae8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the route to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Route details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Route"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Route not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Route not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Routes"
                ],
                "summary": "Update an existing route",
                "description": "Update an existing route in the system and assign a parent route to specified routes.",
                "operationId": "3c48e442a2a52df2799f5b31c7cb2e77",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the route to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "placeStart_id",
                                    "placeEnd_id"
                                ],
                                "properties": {
                                    "placeStart_id": {
                                        "description": "ID of the starting place",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "placeEnd_id": {
                                        "description": "ID of the ending place",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "routes": {
                                        "description": "Array of route IDs to assign the parent route",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": [
                                            1,
                                            2,
                                            3
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Route updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Route"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Route not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Route not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The placeStart_id field is required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Routes"
                ],
                "summary": "Delete a specific route by ID",
                "description": "Delete a specific route",
                "operationId": "42c4985a5b5785dd06e418558d6d0bf7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the route to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Route deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Route deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Route not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Route not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/routeStore": {
            "get": {
                "tags": [
                    "Routes"
                ],
                "summary": "Create a new route",
                "description": "Store a new route in the system, specifying the starting and ending places.",
                "operationId": "7f2320f920d95e54a5abab323f503cd6",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "placeStart_id",
                                    "placeEnd_id"
                                ],
                                "properties": {
                                    "placeStart_id": {
                                        "description": "ID of the starting place",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "placeEnd_id": {
                                        "description": "ID of the ending place",
                                        "type": "integer",
                                        "example": 2
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Route created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "placeStart_id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "placeEnd_id": {
                                            "type": "integer",
                                            "example": 2
                                        },
                                        "created_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-09-21T14:15:22Z"
                                        },
                                        "updated_at": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2024-09-21T14:15:22Z"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The placeStart_id field is required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Places not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Places not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/searchRoute": {
            "get": {
                "tags": [
                    "Routes"
                ],
                "summary": "Search for an existing route",
                "description": "Search for a route in the system based on the starting and ending places.",
                "operationId": "24e0b33acc1bb4cd734620ed162960cc",
                "parameters": [
                    {
                        "name": "placeStart_id",
                        "in": "query",
                        "description": "ID of the starting place",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "placeEnd_id",
                        "in": "query",
                        "description": "ID of the ending place",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 2
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Route found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "route": {
                                            "description": "Details of the existing route",
                                            "properties": {
                                                "placeStart_id": {
                                                    "description": "ID of the starting place",
                                                    "type": "integer"
                                                },
                                                "placeEnd_id": {
                                                    "description": "ID of the ending place",
                                                    "type": "integer"
                                                },
                                                "placeStart": {
                                                    "description": "Name of the starting place",
                                                    "type": "string"
                                                },
                                                "placeEnd": {
                                                    "description": "Name of the ending place",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No route found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "No content when no route is found"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The placeStart_id field is required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Place not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Places not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/addSubRoute": {
            "post": {
                "tags": [
                    "Routes"
                ],
                "summary": "Store a new subroute with a parent route",
                "description": "Creates a new subroute and associates it with a specified parent route. If the subroute already exists, it updates its association with the parent route.",
                "operationId": "dd6ffcf012eae6386da693cfdebda2c5",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "route_id",
                                    "subPlaceStart_id",
                                    "subPlaceEnd_id"
                                ],
                                "properties": {
                                    "route_id": {
                                        "description": "ID of the parent route",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "subPlaceStart_id": {
                                        "description": "ID of the starting place for the subroute",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "subPlaceEnd_id": {
                                        "description": "ID of the ending place for the subroute",
                                        "type": "integer",
                                        "example": 3
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Subroute created or updated successfully and associated with the parent route.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Subroute created successfully."
                                        },
                                        "route": {
                                            "description": "The parent route with updated subroutes",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Parent route or places not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Parent route or places not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Validation error message."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/routes/assign-parent": {
            "post": {
                "tags": [
                    "Routes"
                ],
                "summary": "Assign a parent route to multiple routes",
                "description": "Assign an existing route as a parent to multiple routes.",
                "operationId": "2f3ea53fc382889cf4a2d531b1f9ec17",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "routes",
                                    "routeFather_id"
                                ],
                                "properties": {
                                    "routes": {
                                        "description": "Array of route IDs to be assigned a parent",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": [
                                            1,
                                            2,
                                            3
                                        ]
                                    },
                                    "routeFather_id": {
                                        "description": "ID of the parent route",
                                        "type": "integer",
                                        "example": 3
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Parent route assigned successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Parent route assigned successfully."
                                        },
                                        "routes": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Route"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "One or more routes or Parent route not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "One or more routes or Parent route not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The routeFather_id field is required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/subcontract": {
            "get": {
                "tags": [
                    "Subcontract"
                ],
                "summary": "Get all subcontract",
                "description": "Show all subcontract",
                "operationId": "6dd5b4a04dba45230b10e8dbfc31d55a",
                "responses": {
                    "200": {
                        "description": "List of subcontract",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Subcontract"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportes/public/api/subcontract": {
            "post": {
                "tags": [
                    "Subcontract"
                ],
                "summary": "Create a subcontract",
                "description": "Create a new subcontract",
                "operationId": "44d7499f15833a25fc0aaa169b93a9c5",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "typeofDocument",
                                    "documentNumber",
                                    "address",
                                    "comercialName",
                                    "representativePersonDni",
                                    "representativePersonName",
                                    "telephone"
                                ],
                                "properties": {
                                    "typeofDocument": {
                                        "type": "string",
                                        "example": "DNI"
                                    },
                                    "documentNumber": {
                                        "type": "string",
                                        "example": "12345678"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "Av. Siempre Viva 123"
                                    },
                                    "comercialName": {
                                        "type": "string",
                                        "example": "Empresa Comercial S.A."
                                    },
                                    "representativePersonDni": {
                                        "type": "string",
                                        "example": "87654321"
                                    },
                                    "representativePersonName": {
                                        "type": "string",
                                        "example": "Juan Pérez"
                                    },
                                    "telephone": {
                                        "type": "string",
                                        "example": "987654321"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subcontract"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/subcontract/{id}": {
            "get": {
                "tags": [
                    "Subcontract"
                ],
                "summary": "Get a subcontract by ID",
                "description": "Retrieve a subcontract by its ID",
                "operationId": "8f7405f3cfaf83153836979ff99ea0bc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the subcontract to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subcontract found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subcontract"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Subcontract"
                ],
                "summary": "Delete a Subcontract",
                "description": "Delete a Subcontract by ID",
                "operationId": "2a2b384f2292a3ec879027c243f428f4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Subcontract to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sub Contract deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportes/public/api/subcontract/{id}": {
            "put": {
                "tags": [
                    "Subcontract"
                ],
                "summary": "Update a subcontract",
                "description": "Update an existing subcontract",
                "operationId": "c58a728a39e041a42634c957f2029634",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the subcontract to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "typeofDocument",
                                    "documentNumber",
                                    "address",
                                    "comercialName",
                                    "representativePersonDni",
                                    "representativePersonName",
                                    "telephone"
                                ],
                                "properties": {
                                    "typeofDocument": {
                                        "type": "string",
                                        "example": "DNI"
                                    },
                                    "documentNumber": {
                                        "type": "string",
                                        "example": "12345678"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "Av. Siempre Viva 123"
                                    },
                                    "comercialName": {
                                        "type": "string",
                                        "example": "Empresa Comercial S.A."
                                    },
                                    "representativePersonDni": {
                                        "type": "string",
                                        "example": "87654321"
                                    },
                                    "representativePersonName": {
                                        "type": "string",
                                        "example": "Juan Pérez"
                                    },
                                    "telephone": {
                                        "type": "string",
                                        "example": "987654321"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subcontract"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Subcontract not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/typecarroceria": {
            "get": {
                "tags": [
                    "Type Carroceria"
                ],
                "summary": "Retrieve all Type Carrocerias",
                "description": "Fetches a list of all available Type Carrocerias in the system.",
                "operationId": "a3f27fa42bbf7a93e270384928350aa0",
                "responses": {
                    "200": {
                        "description": "Successful retrieval of the list of Type Carrocerias.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TypeCarroceria"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Type Carroceria"
                ],
                "summary": "Create a new Type Carroceria",
                "description": "Stores a new Type Carroceria in the database.",
                "operationId": "de081d45e2ff8ae3a5352d4afd95486a",
                "requestBody": {
                    "description": "Data for creating a Type Carroceria",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "description",
                                    "state",
                                    "typecompany_id"
                                ],
                                "properties": {
                                    "description": {
                                        "description": "Description of the Type Carroceria",
                                        "type": "string",
                                        "example": "Box Truck"
                                    },
                                    "typecompany_id": {
                                        "description": "ID of the associated Type Company",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Type Carroceria created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeCarroceria"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Some fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/typecarroceria/{id}": {
            "get": {
                "tags": [
                    "Type Carroceria"
                ],
                "summary": "Get a Type Carroceria by ID",
                "description": "Retrieve a Type Carroceria by its ID",
                "operationId": "1c5e7d0ab41019619a483eebf1b115f7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Type Carroceria to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Type Carroceria found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeCarroceria"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Type Carroceria not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Type Carroceria not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Type Carroceria"
                ],
                "summary": "Update an existing Type Carroceria",
                "description": "Update an existing Type Carroceria",
                "operationId": "d884ed5e48163b58a8a3443843f419b6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Type Carroceria to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated Type Carroceria data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "description": {
                                        "description": "Description of the Type Carroceria",
                                        "type": "string",
                                        "example": "Updated Description"
                                    },
                                    "typecompany_id": {
                                        "description": "ID of the associated Type Company",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Type Carroceria updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeCarroceria"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Type Carroceria not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Type Carroceria not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Type Carroceria"
                ],
                "summary": "Delete a Type Carroceria",
                "description": "Delete a Type Carroceria by ID",
                "operationId": "4e71953361c7b2be69a3ad51ef92ed7a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Type Carroceria to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Type Carroceria deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Type Carroceria deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Type Carroceria not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Type Carroceria not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/typecompany": {
            "get": {
                "tags": [
                    "Type Company"
                ],
                "summary": "Retrieve all Type Companies",
                "description": "Fetches a list of all available Type Companies in the system.",
                "operationId": "59951bfd26e79071857b69738c36106d",
                "responses": {
                    "200": {
                        "description": "Successful retrieval of the list of Type Companies.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TypeCompany"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Type Company"
                ],
                "summary": "Create a new Type Company",
                "description": "Stores a new Type Company in the database.",
                "operationId": "d3194701096c3a0f8094551683f8fb06",
                "requestBody": {
                    "description": "Data for creating a Type Company",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "description",
                                    "state"
                                ],
                                "properties": {
                                    "description": {
                                        "description": "Description of the Type Company",
                                        "type": "string",
                                        "example": "Transportation Company"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Type Company created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeCompany"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Some fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/typecompany/{id}": {
            "get": {
                "tags": [
                    "Type Company"
                ],
                "summary": "Get a Type Company by ID",
                "description": "Retrieve a Type Company by its ID",
                "operationId": "aabbf849895d7e555878c6a6ca92d6fd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Type Company to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Type Company found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeCompany"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Type Company not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Type Company not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Type Company"
                ],
                "summary": "Update an existing Type Company",
                "description": "Update an existing Type Company",
                "operationId": "4922a40f068c5b22f6bbb9fc58282b84",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Type Company to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated Type Company data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "description": {
                                        "description": "Description of the Type Company",
                                        "type": "string",
                                        "example": "Updated Description"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Type Company updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeCompany"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Type Company not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Type Company not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Type Company"
                ],
                "summary": "Delete a Type Company",
                "description": "Delete a Type Company by ID",
                "operationId": "85f01009025cfaeabc9527adbe1b5885",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Type Company to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Type Company deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Type Company deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Type Company not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Type Company not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/typeofUser": {
            "get": {
                "tags": [
                    "TypeofUser"
                ],
                "summary": "Get all typeofUser",
                "description": "Show all typeofUser",
                "operationId": "047b5550641cbe7713e1eaf1bef5a262",
                "responses": {
                    "200": {
                        "description": "List of typeofUser",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TypeOf_User"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "TypeofUser"
                ],
                "summary": "Store a new typeofUser",
                "description": "Create a new typeofUser",
                "operationId": "0e0d2fbfba029abd412e207c805072a0",
                "requestBody": {
                    "description": "TypeOf_User data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name Type of User",
                                        "type": "string",
                                        "example": "Cajero"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "TypeOf_User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TypeOf_User"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some Fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/typeofUser/{id}": {
            "get": {
                "tags": [
                    "TypeofUser"
                ],
                "summary": "Get a typeofUser by ID",
                "description": "Retrieve a typeofUser by its ID",
                "operationId": "883fdb326cebb8dfa0c130a853bf01e3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the typeofUser to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TypeofUser found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TypeOf_User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "TypeofUser"
                ],
                "summary": "Update an existing type of User",
                "description": "Update an existing type of User",
                "operationId": "45176328644dfc10a4e9ef9dbca04938",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the type of User to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Client data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name Type of User",
                                        "type": "string",
                                        "example": "Cajero2"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Client updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TypeOf_User"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "TypeofUser"
                ],
                "summary": "Delete a TypeofUser",
                "description": "Delete a TypeofUser by ID",
                "operationId": "74c1eb32c24ca2bd104d867485c99605",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the TypeofUser to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TypeOf_User deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/setAccess/{typeUserId}": {
            "put": {
                "tags": [
                    "TypeofUser"
                ],
                "summary": "Set access to type of User",
                "description": "Set access permissions for a specific type of user.",
                "operationId": "1af0762c22679009e4a606fe6f36e562",
                "parameters": [
                    {
                        "name": "typeUserId",
                        "in": "path",
                        "description": "ID of the type of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "description": "Options menu in array format",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "optionsMenu"
                                ],
                                "properties": {
                                    "optionsMenu": {
                                        "description": "List of permission IDs to assign",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": [
                                            1,
                                            2,
                                            3
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Permissions assigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Permissions assigned successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error."
                                        },
                                        "errors": {
                                            "description": "Object containing validation errors",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/getAccess/{typeUserId}": {
            "get": {
                "tags": [
                    "TypeofUser"
                ],
                "summary": "Get access to type of User",
                "description": "Get access to a specific user.",
                "operationId": "d89e0036689ebd7923fde1f412f6a7d7",
                "parameters": [
                    {
                        "name": "typeUserId",
                        "in": "path",
                        "description": "ID of the type of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions get successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Option_Menu"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "description": "Informative message",
                                            "type": "string",
                                            "example": "Informative message"
                                        },
                                        "errors": {
                                            "description": "Object with validation errors",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/departments": {
            "get": {
                "tags": [
                    "Ubigeo"
                ],
                "summary": "Get all departments",
                "description": "Show all departments",
                "operationId": "99875a3e52dfa2fbb15e7af0a4e81be7",
                "responses": {
                    "200": {
                        "description": "List of departments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Amazonas"
                                            },
                                            "ubigeo_code": {
                                                "type": "string",
                                                "example": "01"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/provinces/{departmentId}": {
            "get": {
                "tags": [
                    "Ubigeo"
                ],
                "summary": "Get provinces by department ID",
                "description": "Show all provinces for a given department ID",
                "operationId": "5f2c94d24f23cecc7b1e50cf6a772284",
                "parameters": [
                    {
                        "name": "departmentId",
                        "in": "path",
                        "description": "ID of the department",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of provinces",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Chachapoyas"
                                            },
                                            "ubigeo_code": {
                                                "type": "string",
                                                "example": "0101"
                                            },
                                            "department_id": {
                                                "type": "integer",
                                                "example": 1
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/districts/{provinceId}": {
            "get": {
                "tags": [
                    "Ubigeo"
                ],
                "summary": "Get districts by province ID",
                "description": "Show all districts for a given province ID",
                "operationId": "f9c78fb1e4855be9a0b710f727eaa4f0",
                "parameters": [
                    {
                        "name": "provinceId",
                        "in": "path",
                        "description": "ID of the province",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of districts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Chachapoyas"
                                            },
                                            "ubigeo_code": {
                                                "type": "string",
                                                "example": "010101"
                                            },
                                            "province_id": {
                                                "type": "integer",
                                                "example": 1
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/ubigeos": {
            "get": {
                "tags": [
                    "Ubigeo"
                ],
                "summary": "Get ubigeo information",
                "description": "Show a specific ubigeo by combining the ID, province, and department.",
                "operationId": "4841587f4d4aba69f1c29fba66d22926",
                "responses": {
                    "200": {
                        "description": "Ubigeo details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "province": {
                                            "type": "string",
                                            "example": "Trujillo"
                                        },
                                        "department": {
                                            "type": "string",
                                            "example": "La Libertad"
                                        },
                                        "ubigeo": {
                                            "type": "string",
                                            "example": "1-Trujillo-La Libertad"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/user": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get all Users",
                "operationId": "1dae47387df7fcc2e128dc573efbc089",
                "responses": {
                    "200": {
                        "description": "List of active Useres",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Option_Menu"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/user?page=1"
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/user?page=2"
                                        },
                                        "path": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/user"
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "example": "null"
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 15
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Store a new user",
                "description": "Create a new user",
                "operationId": "a3478f25d89ed35b14a32b93924d827a",
                "requestBody": {
                    "description": "User data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "username": {
                                        "description": "Username",
                                        "type": "string",
                                        "example": "john_doe"
                                    },
                                    "password": {
                                        "description": "Password",
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "worker_id": {
                                        "description": "Worker ID",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "box_id": {
                                        "description": "Box ID",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "typeof_user_id": {
                                        "description": "typeof_user ID",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "description": "User ID",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "username": {
                                            "description": "Username",
                                            "type": "string",
                                            "example": "john_doe"
                                        },
                                        "worker_id": {
                                            "description": "Worker ID",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "box_id": {
                                            "description": "Box ID",
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login user",
                "description": "Authenticate user and generate access token",
                "operationId": "d9b09f4ac893a0787b6ece5265253b0c",
                "requestBody": {
                    "description": "User credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "username",
                                    "password",
                                    "branchOffice_id"
                                ],
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "example": "administrador"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password"
                                    },
                                    "branchOffice_id": {
                                        "description": "ID of the branch office",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User authenticated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "token del usuario",
                                            "type": "string"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "menu": {
                                            "type": "array",
                                            "items": {
                                                "description": "Menú",
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "User not found or password incorrect",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "description": "Error message",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/user/{id}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Show the specified Users",
                "operationId": "3e179d9bdf9dc886ef1979f700278f07",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the User",
                        "required": true,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found"
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update an existing user",
                "description": "Update an existing user",
                "operationId": "49e380183c01b3e7ff48398645f90dbc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "username": {
                                        "description": "Username",
                                        "type": "string",
                                        "example": "john_doe"
                                    },
                                    "password": {
                                        "description": "Password",
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "worker_id": {
                                        "description": "Worker ID",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "box_id": {
                                        "description": "Box ID",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "typeof_user_id": {
                                        "description": "typeof_user ID",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Client updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Remove the specified User",
                "operationId": "94ed57554bf41ed6e2c1c6b1320b6623",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the User",
                        "required": true,
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/authenticate": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Get Profile user",
                "description": "Get user",
                "operationId": "606d2109330397c07058ac453538d3d0",
                "responses": {
                    "200": {
                        "description": "User authenticated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "menu": {
                                            "type": "array",
                                            "items": {
                                                "description": "Menú",
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/logout": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout",
                "description": "Log out user.",
                "operationId": "647cf483fd19564ce39560971df8957b",
                "responses": {
                    "200": {
                        "description": "Successful logout"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "An error occurred while trying to log out. Please try again later."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/searchByDni/{dni}": {
            "get": {
                "tags": [
                    "Search"
                ],
                "summary": "Search information by DNI",
                "description": "Search information about a person by their DNI number.",
                "operationId": "f639744c32039efd16862a9c6d543134",
                "parameters": [
                    {
                        "name": "dni",
                        "in": "path",
                        "description": "DNI number of the person to search",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information found successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "code": {
                                                "type": "integer",
                                                "example": 0
                                            },
                                            "dni": {
                                                "type": "string",
                                                "example": "string"
                                            },
                                            "apepat": {
                                                "type": "string",
                                                "example": "string"
                                            },
                                            "apemat": {
                                                "type": "string",
                                                "example": "string"
                                            },
                                            "apcas": {
                                                "type": "string",
                                                "example": ""
                                            },
                                            "nombres": {
                                                "type": "string",
                                                "example": "string"
                                            },
                                            "fecnac": {
                                                "type": "string",
                                                "format": "date"
                                            },
                                            "ubigeo": {
                                                "type": "integer"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/searchByRuc/{ruc}": {
            "get": {
                "tags": [
                    "Search"
                ],
                "summary": "Search information by RUC",
                "description": "Search information about a person by their RUC number.",
                "operationId": "058f9d654c40efc4c4d2718b5db3e733",
                "parameters": [
                    {
                        "name": "ruc",
                        "in": "path",
                        "description": "RUC number of the person to search",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information found successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "code": {
                                                "type": "integer",
                                                "example": 0
                                            },
                                            "RUC": {
                                                "type": "string",
                                                "example": "string"
                                            },
                                            "RazonSocial": {
                                                "type": "string",
                                                "example": "string"
                                            },
                                            "Direccion": {
                                                "type": "string",
                                                "example": "string"
                                            },
                                            "Tipo": {
                                                "type": "string"
                                            },
                                            "Inscripcion": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/vehicleAll": {
            "get": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Get all Vehicle",
                "description": "Show all Vehicle",
                "operationId": "8eb90441d2350edc535ce9571cfc53c5",
                "responses": {
                    "200": {
                        "description": "List of Vehicle"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/vehicle": {
            "get": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Get all Vehicles",
                "description": "Retrieve a paginated list of vehicles, optionally filtered by branch office or type of vehicle (e.g., Tracto, Carreta).",
                "operationId": "7a8a041a217ec94fcf871f866ea8e3ad",
                "parameters": [
                    {
                        "name": "branch_office_id",
                        "in": "query",
                        "description": "ID of the branch office to filter vehicles by",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "typeCar",
                        "in": "query",
                        "description": "Type of vehicle to filter by (e.g., Tracto, Carreta)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Tracto",
                                "Carreta"
                            ],
                            "example": "Tracto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Vehicles",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Vehicle"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Branch Office Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Branch Office Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Create a new vehicle",
                "description": "Create a new vehicle and upload associated photos.",
                "operationId": "9ccc1d4c7b369091da322ab2500d1886",
                "requestBody": {
                    "description": "Vehicle data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "oldPlate": {
                                        "type": "string",
                                        "example": "ABC123"
                                    },
                                    "currentPlate": {
                                        "type": "string",
                                        "example": "XYZ789"
                                    },
                                    "numberMtc": {
                                        "type": "string",
                                        "example": "123456789"
                                    },
                                    "brand": {
                                        "type": "string",
                                        "example": "Toyota"
                                    },
                                    "numberModel": {
                                        "type": "string",
                                        "example": "Corolla"
                                    },
                                    "tara": {
                                        "type": "number",
                                        "example": 1500.5
                                    },
                                    "netWeight": {
                                        "type": "number",
                                        "example": 2000.75
                                    },
                                    "usefulLoad": {
                                        "type": "number",
                                        "example": 500.25
                                    },
                                    "ownerCompany": {
                                        "type": "string",
                                        "example": "Transportes S.A."
                                    },
                                    "length": {
                                        "type": "number",
                                        "example": 5.2
                                    },
                                    "width": {
                                        "type": "number",
                                        "example": 2
                                    },
                                    "height": {
                                        "type": "number",
                                        "example": 1.8
                                    },
                                    "ejes": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "wheels": {
                                        "type": "integer",
                                        "example": 4
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "Red"
                                    },
                                    "typeCar": {
                                        "type": "string",
                                        "example": "Tracto"
                                    },
                                    "year": {
                                        "type": "integer",
                                        "example": 2020
                                    },
                                    "tireType": {
                                        "type": "string",
                                        "example": "Type A"
                                    },
                                    "tiresuspension": {
                                        "type": "string",
                                        "example": "Suspension B"
                                    },
                                    "modelVehicle_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "branchOffice_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "bonus": {
                                        "type": "number",
                                        "example": 1000
                                    },
                                    "isConection": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "companyGps_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "mode": {
                                        "type": "string",
                                        "example": "Standard"
                                    },
                                    "responsable_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "photos": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "file": {
                                                    "description": "Photo file",
                                                    "type": "string",
                                                    "format": "binary"
                                                },
                                                "type": {
                                                    "description": "Type of the photo",
                                                    "type": "string",
                                                    "example": "Documento/Imagen"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Vehicle created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Vehicle created successfully"
                                        },
                                        "vehicle": {
                                            "$ref": "#/components/schemas/Vehicle"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error: The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/vehicle/{id}": {
            "get": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Get a vehicle by ID",
                "description": "Retrieve a vehicle by its ID",
                "operationId": "b586ed1b1ec38b633697e8e083663bad",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the vehicle to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vehicle encontrado"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Create or update a vehicle",
                "description": "Create a new vehicle or update an existing one and optionally upload associated photos.",
                "operationId": "6a44b1dd0870ce1e264b4e2268eca5b4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the vehicle. Leave empty to create a new vehicle.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "nullable": true
                        }
                    }
                ],
                "requestBody": {
                    "description": "Vehicle data",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "oldPlate": {
                                        "type": "string",
                                        "example": "ABC123"
                                    },
                                    "currentPlate": {
                                        "type": "string",
                                        "example": "XYZ789"
                                    },
                                    "numberMtc": {
                                        "type": "string",
                                        "example": "123456789"
                                    },
                                    "brand": {
                                        "type": "string",
                                        "example": "Toyota"
                                    },
                                    "numberModel": {
                                        "type": "string",
                                        "example": "Corolla"
                                    },
                                    "tara": {
                                        "type": "number",
                                        "example": 1500.5
                                    },
                                    "netWeight": {
                                        "type": "number",
                                        "example": 2000.75
                                    },
                                    "usefulLoad": {
                                        "type": "number",
                                        "example": 500.25
                                    },
                                    "ownerCompany": {
                                        "type": "string",
                                        "example": "Transportes S.A."
                                    },
                                    "length": {
                                        "type": "number",
                                        "example": 5.2
                                    },
                                    "width": {
                                        "type": "number",
                                        "example": 2
                                    },
                                    "height": {
                                        "type": "number",
                                        "example": 1.8
                                    },
                                    "ejes": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "wheels": {
                                        "type": "integer",
                                        "example": 4
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "Red"
                                    },
                                    "typeCar": {
                                        "type": "string",
                                        "example": "Tracto"
                                    },
                                    "year": {
                                        "type": "integer",
                                        "example": 2020
                                    },
                                    "tireType": {
                                        "type": "string",
                                        "example": "Type A"
                                    },
                                    "tiresuspension": {
                                        "type": "string",
                                        "example": "Suspension B"
                                    },
                                    "modelVehicle_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "branchOffice_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "bonus": {
                                        "type": "number",
                                        "example": 1000
                                    },
                                    "isConection": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "companyGps_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "mode": {
                                        "type": "string",
                                        "example": "Standard"
                                    },
                                    "responsable_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "photos": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "file": {
                                                    "description": "Photo file",
                                                    "type": "string",
                                                    "format": "binary"
                                                },
                                                "type": {
                                                    "description": "Type of the photo",
                                                    "type": "string",
                                                    "example": "Documento/Imagen"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Vehicle created or updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Vehicle created or updated successfully"
                                        },
                                        "vehicle": {
                                            "$ref": "#/components/schemas/Vehicle"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation error: The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Vehicle"
                ],
                "summary": "Delete a vehicle",
                "description": "Delete a vehicle by ID",
                "operationId": "32052714b93d6237361e86fb694e91d0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the vehicle to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comision Agent deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/sale": {
            "get": {
                "tags": [
                    "Sale"
                ],
                "summary": "Get all Moviments",
                "operationId": "baa89d693cfe44088b4356d08a9ea505",
                "parameters": [
                    {
                        "name": "branch_office_id",
                        "in": "query",
                        "description": "ID de la sucursal para filtrar los movimientos",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "typeDocument",
                        "in": "query",
                        "description": "Tipo de documento para filtrar los movimientos",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of active Sale",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MovimentRequest"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/sale?page=1"
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/sale?page=2"
                                        },
                                        "path": {
                                            "type": "string",
                                            "example": "http://develop.garzasoft.com/transportev2/public/api/sale"
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 15
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "example": "null"
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 15
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Branch Office Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Branch Office Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Sale"
                ],
                "summary": "Store a new sale",
                "description": "Create a new sale",
                "operationId": "2e242d5f298433582490f0f1630ba999",
                "requestBody": {
                    "description": "Sale data",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "paymentDate": {
                                        "description": "Fecha de pago",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2023-06-17",
                                        "nullable": true
                                    },
                                    "yape": {
                                        "description": "Pago por Yape",
                                        "type": "number",
                                        "format": "float",
                                        "example": 20,
                                        "nullable": true
                                    },
                                    "bank_id": {
                                        "description": "ID bank_id",
                                        "type": "number",
                                        "format": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "deposit": {
                                        "description": "Depósito",
                                        "type": "number",
                                        "format": "float",
                                        "example": 30,
                                        "nullable": true
                                    },
                                    "cash": {
                                        "description": "Efectivo",
                                        "type": "number",
                                        "format": "float",
                                        "example": 50,
                                        "nullable": true
                                    },
                                    "card": {
                                        "description": "Pago por tarjeta",
                                        "type": "number",
                                        "format": "float",
                                        "example": 0.5,
                                        "nullable": true
                                    },
                                    "plin": {
                                        "description": "Pago por Plin",
                                        "type": "number",
                                        "format": "float",
                                        "example": 50,
                                        "nullable": true
                                    },
                                    "comment": {
                                        "description": "Comentario",
                                        "type": "string",
                                        "example": "Pago parcial",
                                        "nullable": true
                                    },
                                    "typeDocument": {
                                        "description": "Tipo de documento",
                                        "type": "string",
                                        "example": "F",
                                        "nullable": true
                                    },
                                    "typePayment": {
                                        "description": "Contado / Credito",
                                        "type": "string",
                                        "example": "Contado",
                                        "nullable": true
                                    },
                                    "numberVoucher": {
                                        "description": "Numero del voucher",
                                        "type": "string"
                                    },
                                    "isBankPayment": {
                                        "description": "0 Desactivado / 1 Activado",
                                        "type": "integer",
                                        "nullable": true
                                    },
                                    "typeSale": {
                                        "description": "Normal / Detraccion",
                                        "type": "string",
                                        "example": "Estandar",
                                        "nullable": true
                                    },
                                    "box_id": {
                                        "description": "ID de la caja",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "branchOffice_id": {
                                        "description": "ID de la sucursal",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "reception_id": {
                                        "description": "ID de la recepción",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "person_id": {
                                        "description": "ID de la persona",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "details": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "product": {
                                                    "type": "string",
                                                    "example": "Descripción"
                                                },
                                                "weight": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 0
                                                },
                                                "price": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 0
                                                },
                                                "quantity": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 0
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "installment": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "date": {
                                                    "type": "number",
                                                    "format": "date",
                                                    "example": "7"
                                                },
                                                "total": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": "100"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "routeVoucher": {
                                        "description": "Imagen del voucher",
                                        "type": "string",
                                        "format": "binary",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Sale created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MovimentRequest"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/saleWithReceptions": {
            "post": {
                "tags": [
                    "Sale1"
                ],
                "summary": "Store a new sale",
                "description": "Create a new sale",
                "operationId": "88637d6735bcdab70a4ec67828e0fcf8",
                "requestBody": {
                    "description": "Sale data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "paymentDate": {
                                        "description": "Fecha de pago",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2023-06-17",
                                        "nullable": true
                                    },
                                    "yape": {
                                        "description": "Pago por Yape",
                                        "type": "number",
                                        "format": "float",
                                        "example": 20,
                                        "nullable": true
                                    },
                                    "bank_id": {
                                        "description": "ID del banco",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "deposit": {
                                        "description": "Depósito",
                                        "type": "number",
                                        "format": "float",
                                        "example": 30,
                                        "nullable": true
                                    },
                                    "cash": {
                                        "description": "Efectivo",
                                        "type": "number",
                                        "format": "float",
                                        "example": 50,
                                        "nullable": true
                                    },
                                    "card": {
                                        "description": "Pago por tarjeta",
                                        "type": "number",
                                        "format": "float",
                                        "example": 0.5,
                                        "nullable": true
                                    },
                                    "plin": {
                                        "description": "Pago por Plin",
                                        "type": "number",
                                        "format": "float",
                                        "example": 50,
                                        "nullable": true
                                    },
                                    "comment": {
                                        "description": "Comentario",
                                        "type": "string",
                                        "example": "Pago parcial",
                                        "nullable": true
                                    },
                                    "typeDocument": {
                                        "description": "Tipo de documento",
                                        "type": "string",
                                        "example": "F",
                                        "nullable": true
                                    },
                                    "typePayment": {
                                        "description": "Tipo de pago (Contado / Crédito)",
                                        "type": "string",
                                        "example": "Contado",
                                        "nullable": true
                                    },
                                    "numberVoucher": {
                                        "description": "Número del voucher",
                                        "type": "string",
                                        "nullable": true
                                    },
                                    "isBankPayment": {
                                        "description": "Indica si es un pago bancario (0: No, 1: Sí)",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "typeSale": {
                                        "description": "Tipo de venta (Normal / Detracción)",
                                        "type": "string",
                                        "example": "Estandar",
                                        "nullable": true
                                    },
                                    "box_id": {
                                        "description": "ID de la caja",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "branchOffice_id": {
                                        "description": "ID de la sucursal",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "receptions": {
                                        "description": "Array de IDs de recepciones",
                                        "type": "array",
                                        "items": {
                                            "description": "ID de la recepción",
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "person_id": {
                                        "description": "ID de la persona",
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "details": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "product": {
                                                    "type": "string",
                                                    "example": "Descripción del producto"
                                                },
                                                "weight": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 0
                                                },
                                                "price": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 0
                                                },
                                                "quantity": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 0
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "installments": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "date": {
                                                    "type": "string",
                                                    "format": "number",
                                                    "example": "7"
                                                },
                                                "importe": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 100
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Venta creada con éxito",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MovimentRequest"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Algunos campos son requeridos."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "No autenticado.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "No autenticado."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/saleWithoutCreditNote": {
            "get": {
                "tags": [
                    "Sale"
                ],
                "summary": "Get Sales Moviments without Credit Notes",
                "description": "Retrieve a list of sales movements that do not have an associated credit note. You can filter the results by branch office, document type, and sequential number.",
                "operationId": "3ac6777c61052e766c862fe91730d105",
                "parameters": [
                    {
                        "name": "branch_office_id",
                        "in": "query",
                        "description": "ID of the branch office to filter movements. If not provided, the user's branch office will be used.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "typeDocument",
                        "in": "query",
                        "description": "Document type to filter movements (e.g., invoice, receipt).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sequentialNumber",
                        "in": "query",
                        "description": "Sequential number to search for in the movements.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Moviments without Credit Notes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MovimentRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Branch Office Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Branch Office Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid parameters"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/saleIdNumber": {
            "get": {
                "tags": [
                    "Sale"
                ],
                "summary": "Get all Moviments",
                "operationId": "f3e8afa582ee7f73a00aa2b211080566",
                "parameters": [
                    {
                        "name": "branch_office_id",
                        "in": "query",
                        "description": "ID de la sucursal para filtrar los movimientos",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "typeDocument",
                        "in": "query",
                        "description": "Tipo de documento para filtrar los movimientos",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Moviments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "sequentialNumber": {
                                                "type": "string",
                                                "example": "20210001"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Branch Office Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Branch Office Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/receptionWithoutSale": {
            "get": {
                "tags": [
                    "Sale"
                ],
                "summary": "Get all Receptions without a Sale",
                "operationId": "14124eb692ddf74d811b2ca08a0ff1bf",
                "parameters": [
                    {
                        "name": "branch_office_id",
                        "in": "query",
                        "description": "ID de la sucursal para filtrar las recepciones",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Receptions without a Sale"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Branch Office Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Branch Office Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/getSalesPendientesByPerson": {
            "get": {
                "tags": [
                    "Sale"
                ],
                "summary": "Obtener cuotas pendientes de pago por cliente",
                "description": "Obtiene las cuotas pendientes de pago de un cliente específico, filtrando por el nombre del cliente. Verifica el token de autorización antes de proceder.",
                "operationId": "3ca6ffff9110e1a7810800e5aa5fb9ec",
                "parameters": [
                    {
                        "name": "namesCadena",
                        "in": "query",
                        "description": "Nombre del cliente para filtrar las ventas pendientes",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "agrolmos"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sale created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación (cliente no encontrado)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Cliente no encontrado o sin ventas pendientes"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/paymasive": {
            "post": {
                "tags": [
                    "Sale"
                ],
                "summary": "Realiza un pago masivo por cuotas pendientes",
                "description": "Este endpoint permite realizar un pago masivo para cuotas de un determinado cliente. Cada pago es validado para no superar el monto de deuda total de la cuota.",
                "operationId": "521d9e0bc8ce5221cee0ebddd666f4c5",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "paymasive": {
                                        "description": "Array de pagos masivos",
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "installment_id": {
                                                    "description": "ID de la cuota",
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "amount": {
                                                    "description": "Monto a pagar",
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 100
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Pago masivo realizado exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Pago masivo procesado correctamente."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación - Monto excede la deuda total",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "El monto ingresado (150.00) no puede ser mayor a la deuda total (100.00)."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "No autorizado - El token de autenticación es inválido o ha expirado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No autorizado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/worker": {
            "get": {
                "tags": [
                    "Worker"
                ],
                "summary": "Get all Worker",
                "description": "Show all Worker",
                "operationId": "e5d56d9dd43d9c1705b0191db3bb3fb8",
                "parameters": [
                    {
                        "name": "branch_office_id",
                        "in": "query",
                        "description": "ID of the branch office",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "occupation",
                        "in": "query",
                        "description": "Occupation of the worker",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status of the worker",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Worker"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Branch Office Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Branch Office Not Found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Worker"
                ],
                "summary": "Store a new worker",
                "description": "Create a new worker",
                "operationId": "6edc036fd68991455e06a3e762d78674",
                "requestBody": {
                    "description": "Worker data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "code": {
                                        "description": "Code property",
                                        "type": "string",
                                        "example": "example_code"
                                    },
                                    "department": {
                                        "description": "Department property",
                                        "type": "string",
                                        "example": "example_department"
                                    },
                                    "province": {
                                        "description": "Province property",
                                        "type": "string",
                                        "example": "example_province"
                                    },
                                    "district": {
                                        "description": "District property",
                                        "type": "string",
                                        "example": "example_district"
                                    },
                                    "maritalStatus": {
                                        "description": "Marital Status property",
                                        "type": "string",
                                        "example": "example_marital_status"
                                    },
                                    "levelInstitution": {
                                        "description": "Level Institution property",
                                        "type": "string",
                                        "example": "example_level_institution"
                                    },
                                    "occupation": {
                                        "description": "Occupation property",
                                        "type": "string",
                                        "example": "example_occupation"
                                    },
                                    "startDate": {
                                        "description": "Start Date property",
                                        "type": "string",
                                        "example": "2024-05-08"
                                    },
                                    "person_id": {
                                        "description": "Person ID property",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "area_id": {
                                        "description": "Area ID property",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "branchOffice_id": {
                                        "description": "Branch Office ID property",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Worker created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Worker"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some Fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/worker/{id}": {
            "get": {
                "tags": [
                    "Worker"
                ],
                "summary": "Get a worker by ID",
                "description": "Retrieve a worker by its ID",
                "operationId": "7bc70805f33702e5706adb7afe1ecbae",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the worker to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Worker encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Worker"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Worker"
                ],
                "summary": "Update an existing worker",
                "description": "Update an existing worker",
                "operationId": "2e21306d34a4eabb547caa95b8e2c9e1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the worker to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Worker data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "code": {
                                        "description": "Code property",
                                        "type": "string",
                                        "example": "example_code"
                                    },
                                    "department": {
                                        "description": "Department property",
                                        "type": "string",
                                        "example": "example_department"
                                    },
                                    "province": {
                                        "description": "Province property",
                                        "type": "string",
                                        "example": "example_province"
                                    },
                                    "district": {
                                        "description": "District property",
                                        "type": "string",
                                        "example": "example_district"
                                    },
                                    "maritalStatus": {
                                        "description": "Marital Status property",
                                        "type": "string",
                                        "example": "example_marital_status"
                                    },
                                    "levelInstitution": {
                                        "description": "Level Institution property",
                                        "type": "string",
                                        "example": "example_level_institution"
                                    },
                                    "occupation": {
                                        "description": "Occupation property",
                                        "type": "string",
                                        "example": "example_occupation"
                                    },
                                    "startDate": {
                                        "description": "Start Date property",
                                        "type": "string",
                                        "example": "2024-05-08"
                                    },
                                    "person_id": {
                                        "description": "Person ID property",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "area_id": {
                                        "description": "Area ID property",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "branchOffice_id": {
                                        "description": "Branch Office ID property",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Worker updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Worker"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Worker"
                ],
                "summary": "Create or update a worker",
                "description": "Create a new worker or update an existing one",
                "operationId": "4218aef51a30c0304176d3635bcccbbf",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the worker to update",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Worker data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "person_id": {
                                        "description": "Person ID property",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "district_id": {
                                        "description": "District property",
                                        "type": "string",
                                        "example": 1
                                    },
                                    "area_id": {
                                        "description": "Area ID property",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "branchOffice_id": {
                                        "description": "Branch Office ID property",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Worker created or updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Worker"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Some fields are required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Worker not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Worker not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Worker"
                ],
                "summary": "Delete a worker",
                "description": "Delete a worker by ID",
                "operationId": "0e6d77dc4b937567bb6ea3101c64208e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the worker to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Worker deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/worker/{id}/historyProgramming": {
            "get": {
                "tags": [
                    "Worker"
                ],
                "summary": "Get a worker's history by ID",
                "description": "Retrieve the programming history of a worker by their ID",
                "operationId": "68b1d1f68ea34113d7d34df53fc0970a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the worker to retrieve history for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Worker history retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DetailWorker"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Worker not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Worker not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/area": {
            "get": {
                "tags": [
                    "Area"
                ],
                "summary": "Get all area",
                "description": "Show all area",
                "operationId": "b8acdd42cfa25a4b6f7c157be89a7cff",
                "responses": {
                    "200": {
                        "description": "List of area",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Area"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Area"
                ],
                "summary": "Create a new area",
                "description": "Create a new area",
                "operationId": "9fe6a1b7168d621400c2c9dfc173b3fa",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "state"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Area"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Area created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Area"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Invalid data provided."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict - Duplicate Name",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Area name already exists."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/area/{id}": {
            "get": {
                "tags": [
                    "Area"
                ],
                "summary": "Get a area by ID",
                "description": "Retrieve a area by its ID",
                "operationId": "12ea690345b37c34f916dd5b823214d9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the area to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Area found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Area"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Area"
                ],
                "summary": "Update an existing area",
                "description": "Update an existing area",
                "operationId": "dd32d8756fb50d4d0f3472f62187c669",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the area to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "state"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Area2"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Area updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Area"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Area not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Area not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict - Duplicate Name",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Area name already exists."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Invalid data provided."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Area"
                ],
                "summary": "Delete a Area",
                "description": "Delete a Area by ID",
                "operationId": "da8feb564dae56591e78dcf38ed827e8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Area to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Area deleted successfully"
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The given data was invalid."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/cargaDocument": {
            "get": {
                "tags": [
                    "CargaDocument"
                ],
                "summary": "Obtener información de CargaDocuments con filtros y ordenamiento",
                "operationId": "17578472768412ab43b902100c242d46",
                "parameters": [
                    {
                        "name": "code_doc",
                        "in": "query",
                        "description": "Filtrar por código del documento",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "person_id",
                        "in": "query",
                        "description": "Filtrar por ID de la persona responsable",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "product_id",
                        "in": "query",
                        "description": "Filtrar por ID del producto relacionado",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branchOffice_id",
                        "in": "query",
                        "description": "Filtrar por ID de la sucursal",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "quantity",
                        "in": "query",
                        "description": "Filtrar por cantidad de producto movido",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "movement_type",
                        "in": "query",
                        "description": "Filtrar por tipo de movimiento (ENTRADA, SALIDA)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "num_anexo",
                        "in": "query",
                        "description": "Filtrar por número de anexo",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment",
                        "in": "query",
                        "description": "Filtrar por comentario adicional",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Filtrar por descripción",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "movement_date",
                        "in": "query",
                        "description": "Filtrar por fecha de movimiento",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "weight",
                        "in": "query",
                        "description": "Filtrar por peso del producto",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lote_doc",
                        "in": "query",
                        "description": "Filtrar por lote del documento",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "date_expiration",
                        "in": "query",
                        "description": "Filtrar por fecha de vencimiento",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista de CargaDocuments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CargaDocument"
                                    }
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validación fallida",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "CargaDocument"
                ],
                "summary": "Crear CargaDocument",
                "operationId": "5e9b91a7a7eaabd84c3c79f68929e31c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CargaDocumentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Documento de Carga creada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CargaDocument"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/cargaDocument/{id}": {
            "get": {
                "tags": [
                    "CargaDocument"
                ],
                "summary": "Obtener detalles de un Documento de Carga por ID",
                "operationId": "dcf5b7d21e8fc92a14dfb8fe22605997",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID del CargaDocument",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Documento de Carga encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CargaDocument"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Documento de Carga no encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Documento de Carga no encontrado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "CargaDocument"
                ],
                "summary": "Actualizar un CargaDocument",
                "operationId": "09552fa04d0c7bf72409e3bd50148897",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/CargaDocumentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Documento de Carga actualizada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CargaDocument"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Documento de Carga no encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Documento de Carga no encontrado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error interno",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error interno del servidor"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/cargadocument/{id}": {
            "delete": {
                "tags": [
                    "CargaDocument"
                ],
                "summary": "Eliminar un Documento de Cargapor ID",
                "operationId": "3749fe00456a3ec473d3c253c2436226",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Documento de Carga eliminado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Documento de Carga eliminado exitosamente"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Documento de Carga no encontrado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/export-kardex": {
            "get": {
                "tags": [
                    "CargaDocument"
                ],
                "summary": "Exportar Kardex",
                "operationId": "f4758cd76c22a7e1f7061ad522aa795a",
                "responses": {
                    "200": {
                        "description": "Archivo exportado correctamente",
                        "headers": {
                            "Content-Disposition": {
                                "schema": {
                                    "type": "string",
                                    "example": "attachment; filename=kardex.xlsx"
                                }
                            }
                        },
                        "content": {
                            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {}
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/ticket-carga/{id}": {
            "get": {
                "tags": [
                    "CargaDocument"
                ],
                "summary": "Generar ticket de carga",
                "operationId": "1e715ce8f8299af99dbab348bcb218d6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID del documento de carga",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket de carga generado correctamente",
                        "headers": {
                            "Content-Disposition": {
                                "schema": {
                                    "type": "string",
                                    "example": "attachment; filename=ticket.pdf"
                                }
                            }
                        },
                        "content": {
                            "application/pdf": {}
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transporte/public/api/dataCollection": {
            "get": {
                "tags": [
                    "CollectionData"
                ],
                "summary": "Get all data",
                "description": "Retrieve all data collections",
                "operationId": "fab5024e2b711abb5d5647cacc71abeb",
                "responses": {
                    "200": {
                        "description": "List of all data collections"
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "msg": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/validatetoken": {
            "post": {
                "tags": [
                    "Sale"
                ],
                "summary": "Enviar código de verificación por correo",
                "operationId": "ffd646a1a5949a4ba7dba273364054f1",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "moviment_id": {
                                        "type": "integer",
                                        "example": 101
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Código enviado correctamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/desvinculatesale": {
            "post": {
                "tags": [
                    "Sale"
                ],
                "summary": "Desvincular guía de venta",
                "description": "Desvincula una guía de una venta específica si cumple con las condiciones. Verifica el token y el estado de la venta antes de proceder.",
                "operationId": "55c6fa8eba61ad909e656b0ab8cb2a97",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "token": {
                                        "type": "string",
                                        "example": "12345678"
                                    },
                                    "moviment_id": {
                                        "type": "integer",
                                        "example": 101
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Guía desvinculada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "moviment": {
                                            "description": "Información actualizada de la venta",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Venta No Encontrado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/bank-account": {
            "get": {
                "tags": [
                    "BankAccount"
                ],
                "summary": "Obtener información de BankAccounts con filtros y ordenamiento",
                "operationId": "b42dd0cd6ca4910b62083d2ebfdd3a0a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Filtrar por ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filtrar por name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filtrar por tipo",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista de BankAccounts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BankAccount"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validación fallida",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "BankAccount"
                ],
                "summary": "Crear BankAccount",
                "operationId": "9267e3adffca688fb058e855a93a28f4",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BankAccountRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "BankAccount creada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BankAccount"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/bank-account/{id}": {
            "get": {
                "tags": [
                    "BankAccount"
                ],
                "summary": "Obtener detalles de un BankAccount por ID",
                "operationId": "22a16ce75923a6e2cb894418f92a18a8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID del BankAccount",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "BankAccount encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BankAccount"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cuenta Bancaria no encontrada",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Cuenta Bancaria no encontrada"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "BankAccount"
                ],
                "summary": "Actualizar un BankAccount",
                "operationId": "ef1afe4ba751f8065ec10315b39a72e6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/BankAccountRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "BankAccount actualizada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BankAccount"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cuenta Bancaria no encontrada",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Cuenta Bancaria no encontrada"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error interno",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error interno del servidor"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "BankAccount"
                ],
                "summary": "Eliminar un BankAccount por ID",
                "operationId": "a7cb90dd21ef2fdfe66df43eca30eb30",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "BankAccount eliminado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "BankAccount eliminado exitosamente"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Cuenta Bancaria no encontrada"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/transcationConcept": {
            "get": {
                "tags": [
                    "TransactionConcept"
                ],
                "summary": "Obtener información de TransactionConcepts con filtros y ordenamiento",
                "operationId": "31a4510aaca4c888812c9a2d940d4372",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Filtrar por ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filtrar por name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filtrar por tipo",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista de TransactionConcepts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionConcept"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validación fallida",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "TransactionConcept"
                ],
                "summary": "Crear TransactionConcept",
                "operationId": "e9a195869ed8046f6dbcc9e6dafd156f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TransactionConceptRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "TransactionConcept creada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionConcept"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/transcationConcept/{id}": {
            "get": {
                "tags": [
                    "TransactionConcept"
                ],
                "summary": "Obtener detalles de un TransactionConcept por ID",
                "operationId": "e90e74df1574ce502badd4728d9e1fa9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID del TransactionConcept",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TransactionConcept encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionConcept"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Concepto no encontrada",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Concepto no encontrada"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "TransactionConcept"
                ],
                "summary": "Actualizar un TransactionConcept",
                "operationId": "31abb720bc4170b4b456c4532013f6dc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TransactionConceptRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "TransactionConcept actualizada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionConcept"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Concepto no encontrada",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Concepto no encontrada"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error interno",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error interno del servidor"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "TransactionConcept"
                ],
                "summary": "Eliminar un TransactionConceptpor ID",
                "operationId": "517afee8d2ac831fd44e9328e8f7a5ee",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TransactionConcept eliminado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "TransactionConcept eliminado exitosamente"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Concepto no encontrada"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/product": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Obtener información de Productos con filtros y ordenamiento",
                "operationId": "6da5a452b087c443f2e25276b004d0b8",
                "parameters": [
                    {
                        "name": "codeproduct",
                        "in": "query",
                        "description": "Filtrar por código del producto",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Filtrar por descripción",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "person_id",
                        "in": "query",
                        "description": "Filtrar por ID de persona",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressproduct",
                        "in": "query",
                        "description": "Filtrar por dirección del producto",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "description": "Filtrar por categoría",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "unity_id",
                        "in": "query",
                        "description": "Filtrar por ID de unidad de medida",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "weight",
                        "in": "query",
                        "description": "Filtrar por peso",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista de Productos",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validación fallida",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Product"
                ],
                "summary": "Crear Product",
                "operationId": "7b1c71085ea45db265cdf77bfe7ae70c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product creada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/product/{id}": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Obtener detalles de un Product por ID",
                "operationId": "65ad9d40f7e945bbd9a90e72333d28b8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID del Product",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Producto no encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Producto no encontrado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Product"
                ],
                "summary": "Actualizar un Product",
                "operationId": "1b506485bdbdc82adc87d12e0233e76a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product actualizada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Producto no encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Producto no encontrado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error interno",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error interno del servidor"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Product"
                ],
                "summary": "Eliminar un Productpor ID",
                "operationId": "6fbaff8f4b686e77d337cec19989b037",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product eliminado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Product eliminado exitosamente"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Producto no encontrado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/tarifario": {
            "get": {
                "tags": [
                    "Tarifario"
                ],
                "summary": "Obtener información de Tarifarios con filtros y ordenamiento",
                "operationId": "18e12ed5d6f092e49275e4e470e5f040",
                "parameters": [
                    {
                        "name": "tarifa",
                        "in": "query",
                        "description": "Filtrar por tarifa",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Filtrar por descripción",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "origin_id",
                        "in": "query",
                        "description": "Filtrar por ID de origen",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "destination_id",
                        "in": "query",
                        "description": "Filtrar por ID de destino",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "person_id",
                        "in": "query",
                        "description": "Filtrar por ID de persona",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "unity_id",
                        "in": "query",
                        "description": "Filtrar por ID de unidad de medida",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limitweight_min",
                        "in": "query",
                        "description": "Filtrar por peso mínimo",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limitweight_max",
                        "in": "query",
                        "description": "Filtrar por peso máximo",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "created_at",
                        "in": "query",
                        "description": "Filtrar por fecha de creación",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista de Tarifarios",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tarifario"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validación fallida",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tarifario"
                ],
                "summary": "Crear Tarifario",
                "operationId": "cef0137e7acb00113c77884b9c1cb435",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TarifarioRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tarifario creada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tarifario"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/tarifario/{id}": {
            "get": {
                "tags": [
                    "Tarifario"
                ],
                "summary": "Obtener detalles de un Tarifario por ID",
                "operationId": "ce617efad87251135a53832c316a67d4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID del Tarifario",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tarifario encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tarifario"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tarifario no encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Tarifario no encontrado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Tarifario"
                ],
                "summary": "Actualizar un Tarifario",
                "operationId": "80e7e510a48aa45abc9b78fe0d0ffdf8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/TarifarioRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tarifario actualizada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tarifario"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tarifario no encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Tarifario no encontrado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error interno",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error interno del servidor"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tarifario"
                ],
                "summary": "Eliminar un Tarifariopor ID",
                "operationId": "d88779799b3979347b6064225eb699dc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tarifario eliminado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tarifario eliminado exitosamente"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Tarifario no encontrado"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/unity": {
            "get": {
                "tags": [
                    "Unity"
                ],
                "summary": "Obtener información de Unitys con filtros y ordenamiento",
                "operationId": "c981bb7d6ee88f4ae33a9c21bf1ac2de",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Filtrar por ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filtrar por name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "Filtrar por codigo",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista de Unitys",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unity"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validación fallida",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Unity"
                ],
                "summary": "Crear Unity",
                "operationId": "316695d69251e3497d7ff2a5b98d6948",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UnityRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Unity creada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unity"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/transportev2/public/api/unity/{id}": {
            "get": {
                "tags": [
                    "Unity"
                ],
                "summary": "Obtener detalles de un Unity por ID",
                "operationId": "044af217dbfb18da0684764d605a3853",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID del Unity",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Unity encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unity"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unidad no encontrada",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unidad no encontrada"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Unity"
                ],
                "summary": "Actualizar un Unity",
                "operationId": "993c3477a7d8c4305946c3814d773706",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UnityRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Unity actualizada exitosamente",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Unity"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Error de validación",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error de validación"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unidad no encontrada",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unidad no encontrada"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error interno",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error interno del servidor"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Unity"
                ],
                "summary": "Eliminar un Unitypor ID",
                "operationId": "0fdf02c9529ed5b50a51a1c1f5440bfc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Unity eliminado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unity eliminado exitosamente"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No encontrado",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unidad no encontrada"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "BankAccountRequest": {
                "title": "BankAccountRequest",
                "description": "Request model for Bank Account information with filters and sorting",
                "required": [
                    "bank_id",
                    "account_number",
                    "account_type",
                    "currency",
                    "holder_id",
                    "status"
                ],
                "properties": {
                    "bank_id": {
                        "description": "ID del banco asociado",
                        "type": "integer",
                        "nullable": false
                    },
                    "account_number": {
                        "description": "Número de cuenta bancaria",
                        "type": "string",
                        "nullable": false
                    },
                    "account_type": {
                        "description": "Tipo de cuenta bancaria (ahorros, corriente, crédito)",
                        "type": "string",
                        "enum": [
                            "ahorros",
                            "corriente",
                            "credito"
                        ],
                        "nullable": false
                    },
                    "currency": {
                        "description": "Código de la moneda (Ej: USD, EUR, PEN)",
                        "type": "string",
                        "nullable": false
                    },
                    "balance": {
                        "description": "Saldo de la cuenta bancaria",
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "holder_name": {
                        "description": "Nombre del titular de la cuenta",
                        "type": "string",
                        "nullable": false
                    },
                    "holder_id": {
                        "description": "ID del titular de la cuenta (referencia a tabla People)",
                        "type": "integer",
                        "nullable": false
                    },
                    "status": {
                        "description": "Estado de la cuenta bancaria",
                        "type": "string",
                        "enum": [
                            "activa",
                            "inactiva",
                            "cerrada"
                        ],
                        "nullable": false
                    },
                    "created_at": {
                        "description": "Fecha de creación",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "updated_at": {
                        "description": "Última actualización",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "BankRequest": {
                "title": "BankRequest",
                "description": "Request model for Bank information with filters and sorting",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre Banco",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CargaDocumentRequest": {
                "title": "CargaDocumentRequest",
                "description": "Request model for loading a document with product details",
                "required": [
                    "movement_date",
                    "quantity",
                    "unit_price",
                    "total_cost",
                    "weight",
                    "movement_type",
                    "product_id",
                    "person_id"
                ],
                "properties": {
                    "movement_date": {
                        "description": "Date of the movement",
                        "type": "string",
                        "format": "date"
                    },
                    "quantity": {
                        "description": "Quantity of the product in the movement",
                        "type": "number",
                        "format": "float"
                    },
                    "unit_price": {
                        "description": "Unit price of the product",
                        "type": "number",
                        "format": "float"
                    },
                    "total_cost": {
                        "description": "Total cost of the product in the movement",
                        "type": "number",
                        "format": "float"
                    },
                    "weight": {
                        "description": "Weight of the product in the movement",
                        "type": "number",
                        "format": "float"
                    },
                    "lote_doc": {
                        "description": "Lote de documento",
                        "type": "number",
                        "format": "string"
                    },
                    "date_expiration": {
                        "description": "Fecha de expiración",
                        "type": "number",
                        "format": "string"
                    },
                    "num_anexo": {
                        "description": "Número de GRE",
                        "type": "number",
                        "format": "string"
                    },
                    "movement_type": {
                        "description": "Type of movement (e.g., entry, exit, etc.)",
                        "type": "string"
                    },
                    "comment": {
                        "description": "Optional comment about the movement",
                        "type": "string",
                        "nullable": true
                    },
                    "product_id": {
                        "description": "ID of the product being moved",
                        "type": "integer"
                    },
                    "person_id": {
                        "description": "ID of the person associated with the movement",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "TransactionConceptRequest": {
                "title": "TransactionConceptRequest",
                "description": "Request model for Bank information with filters and sorting",
                "required": [
                    "id",
                    "name",
                    "type"
                ],
                "properties": {
                    "name": {
                        "description": "PAGO DE MES",
                        "type": "string",
                        "nullable": true
                    },
                    "type": {
                        "description": "INGRESO",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "ProductRequest": {
                "title": "ProductRequest",
                "description": "Request model for Product information with filters and sorting",
                "required": [
                    "description",
                    "category",
                    "weight",
                    "unity_id",
                    "person_id"
                ],
                "properties": {
                    "description": {
                        "description": "Description of the Product",
                        "type": "string"
                    },
                    "category": {
                        "description": "Category of the Product",
                        "type": "string"
                    },
                    "weight": {
                        "description": "Weight of the Product",
                        "type": "number",
                        "format": "float",
                        "minimum": 0
                    },
                    "stock": {
                        "description": "Stock quantity of the Product",
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "nullable": true
                    },
                    "unity_id": {
                        "description": "ID of the unity associated with the Product",
                        "type": "integer"
                    },
                    "person_id": {
                        "description": "ID of the person associated with the Product",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "TarifarioRequest": {
                "title": "TarifarioRequest",
                "description": "Request model for Tarifario information with filters and sorting",
                "required": [
                    "id",
                    "tarifa",
                    "person_id",
                    "destination_id",
                    "origin_id",
                    "unity_id"
                ],
                "properties": {
                    "id": {
                        "description": "ID of the Tarifario",
                        "type": "integer",
                        "nullable": true
                    },
                    "tarifa": {
                        "description": "Tarifa amount",
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "description": {
                        "description": "Description of the Tarifario",
                        "type": "string",
                        "nullable": true
                    },
                    "person_id": {
                        "description": "ID of the person associated with the Tarifario",
                        "type": "integer",
                        "nullable": false
                    },
                    "tarifa_camp": {
                        "description": "Tarifa camp amount",
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "limitweight_min": {
                        "description": "Weight limit min for the Tarifario",
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "limitweight_max": {
                        "description": "Weight limit max for the Tarifario",
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "destination_id": {
                        "description": "ID of the destination place",
                        "type": "integer",
                        "nullable": false
                    },
                    "origin_id": {
                        "description": "ID of the origin place",
                        "type": "integer",
                        "nullable": false
                    },
                    "unity_id": {
                        "description": "ID of the unity associated with the Tarifario",
                        "type": "integer",
                        "nullable": false
                    }
                },
                "type": "object"
            },
            "UnityRequest": {
                "title": "UnityRequest",
                "description": "Request model for Unity information with filters and sorting",
                "required": [
                    "id",
                    "name",
                    "code"
                ],
                "properties": {
                    "name": {
                        "description": "Nombre Unidad",
                        "type": "string",
                        "nullable": true
                    },
                    "code": {
                        "description": "Codigo Unidad",
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "BankAccount": {
                "title": "Bank Account",
                "description": "Model representing a Bank Account",
                "required": [
                    "id",
                    "bank_id",
                    "account_number",
                    "account_type",
                    "currency",
                    "balance",
                    "holder_name",
                    "status"
                ],
                "properties": {
                    "id": {
                        "description": "Bank Account ID",
                        "type": "integer"
                    },
                    "bank_id": {
                        "description": "ID of the bank",
                        "type": "integer"
                    },
                    "account_number": {
                        "description": "Unique account number",
                        "type": "string"
                    },
                    "account_type": {
                        "description": "Type of account (e.g., savings, checking)",
                        "type": "string"
                    },
                    "currency": {
                        "description": "Currency of the account (e.g., USD, EUR)",
                        "type": "string"
                    },
                    "balance": {
                        "description": "Current balance in the account",
                        "type": "number",
                        "format": "float"
                    },
                    "holder_name": {
                        "description": "Name of the account holder",
                        "type": "string"
                    },
                    "holder_id": {
                        "description": "ID of the account holder (if applicable)",
                        "type": "integer",
                        "nullable": true
                    },
                    "status": {
                        "description": "Account status (e.g., active, inactive)",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the account was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the account was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Bank": {
                "title": "Bank",
                "description": "Model representing a Bank",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "Bank ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the unity",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Creation date of the unity",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CargaDocument": {
                "title": "CargaDocument",
                "description": "Carga model",
                "required": [
                    "id",
                    "movement_date",
                    "quantity",
                    "unit_price",
                    "total_cost",
                    "movement_type",
                    "stock_balance",
                    "product_id",
                    "person_id"
                ],
                "properties": {
                    "id": {
                        "description": "Carga ID",
                        "type": "integer"
                    },
                    "movement_date": {
                        "description": "Date of movement",
                        "type": "string",
                        "format": "date"
                    },
                    "quantity": {
                        "description": "Quantity of product moved",
                        "type": "integer"
                    },
                    "unit_price": {
                        "description": "Unit price of the product",
                        "type": "number",
                        "format": "float"
                    },
                    "total_cost": {
                        "description": "Total cost of the movement",
                        "type": "number",
                        "format": "float"
                    },
                    "weight": {
                        "description": "Weight of the product",
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "movement_type": {
                        "description": "Type of movement (e.g., IN, OUT)",
                        "type": "string"
                    },
                    "stock_balance_before": {
                        "description": "Stock balance before movement",
                        "type": "integer"
                    },
                    "stock_balance_after": {
                        "description": "Stock balance after movement",
                        "type": "integer"
                    },
                    "comment": {
                        "description": "Additional comments",
                        "type": "string",
                        "nullable": true
                    },
                    "product_id": {
                        "description": "ID of related product",
                        "type": "integer"
                    },
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "person_id": {
                        "description": "ID of responsible person",
                        "type": "integer"
                    },
                    "person": {
                        "$ref": "#/components/schemas/Person"
                    },
                    "created_at": {
                        "description": "Creation date in YYYY-MM-DD HH:MM:SS format",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Product": {
                "title": "Product",
                "description": "Product model",
                "required": [
                    "id",
                    "description",
                    "stock",
                    "unity_id",
                    "person_id"
                ],
                "properties": {
                    "id": {
                        "description": "Product ID",
                        "type": "integer"
                    },
                    "description": {
                        "description": "Product description",
                        "type": "string"
                    },
                    "stock": {
                        "description": "Product stock",
                        "type": "integer"
                    },
                    "weight": {
                        "description": "Product weight",
                        "type": "number",
                        "format": "float"
                    },
                    "category": {
                        "description": "Product category",
                        "type": "string",
                        "nullable": true
                    },
                    "addressproduct": {
                        "description": "Product address",
                        "type": "string",
                        "nullable": true
                    },
                    "codeproduct": {
                        "description": "Product code",
                        "type": "string",
                        "nullable": true
                    },
                    "unity_id": {
                        "description": "Unit of measurement ID",
                        "type": "integer"
                    },
                    "unity": {
                        "$ref": "#/components/schemas/Unity"
                    },
                    "person_id": {
                        "description": "Person ID associated with the product",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Creation date in YYYY-MM-DD HH:MM:SS format",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Tarifario": {
                "title": "Tarifario",
                "description": "Model representing a Tariff",
                "required": [
                    "id",
                    "tarifa",
                    "unity_id"
                ],
                "properties": {
                    "id": {
                        "description": "Tariff ID",
                        "type": "integer"
                    },
                    "tarifa": {
                        "description": "Rate or tariff value",
                        "type": "number",
                        "format": "float"
                    },
                    "tarifa_camp": {
                        "description": "Campaign tariff value",
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "description": {
                        "description": "Description of the tariff",
                        "type": "string",
                        "nullable": true
                    },
                    "limitweight_min": {
                        "description": "Minimum weight limit",
                        "type": "number",
                        "format": "float"
                    },
                    "limitweight_max": {
                        "description": "Maximum weight limit",
                        "type": "number",
                        "format": "float"
                    },
                    "destination_id": {
                        "description": "ID of the destination place",
                        "type": "integer"
                    },
                    "destination": {
                        "$ref": "#/components/schemas/Place"
                    },
                    "origin_id": {
                        "description": "ID of the origin place",
                        "type": "integer"
                    },
                    "origin": {
                        "$ref": "#/components/schemas/Place"
                    },
                    "unity_id": {
                        "description": "ID of the associated unity",
                        "type": "integer"
                    },
                    "unity": {
                        "$ref": "#/components/schemas/Unity"
                    },
                    "person_id": {
                        "description": "ID of the associated person",
                        "type": "integer",
                        "nullable": true
                    },
                    "person": {
                        "$ref": "#/components/schemas/Person"
                    },
                    "created_at": {
                        "description": "Creation date of the tariff",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "TransactionConcept": {
                "title": "TransactionConcept",
                "description": "Model representing a TransactionConcept",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "TransactionConcept ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the Concept",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of the Concept",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Creation date of the unity",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Unity": {
                "title": "Unity",
                "description": "Model representing a Unity",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "Unity ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the unity",
                        "type": "string"
                    },
                    "code": {
                        "description": "Code of the unity",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Creation date of the unity",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Address": {
                "title": "address",
                "description": "address Model",
                "required": [
                    "id",
                    "name",
                    "reference",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID of the address",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the address",
                        "type": "string"
                    },
                    "reference": {
                        "description": "Reference of the address",
                        "type": "string"
                    },
                    "state": {
                        "description": "State of the address",
                        "type": "string"
                    },
                    "client_id": {
                        "description": "ID of the adress client",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Creation date of the address",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last update date of the address",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Deletion date of the address (if applicable)",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "client": {
                        "$ref": "#/components/schemas/Person"
                    }
                },
                "type": "object"
            },
            "Area": {
                "title": "area",
                "description": "Modelo de Área",
                "required": [
                    "id",
                    "name",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID del área",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Nombre del área",
                        "type": "string"
                    },
                    "state": {
                        "description": "Estado del área",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Fecha de creación del área",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Fecha de actualización del área",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Fecha de eliminación del área",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Box": {
                "title": "box",
                "description": "Modelo de box",
                "required": [
                    "id",
                    "name",
                    "serie",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID de la box",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Nombre de la box",
                        "type": "string"
                    },
                    "status": {
                        "description": "Estado de la box",
                        "type": "boolean"
                    },
                    "branchOffice_id": {
                        "description": "Branch Office",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Fecha de creación de la box",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "BranchOffice": {
                "title": "branch_office",
                "description": "Modelo de Sucursal",
                "required": [
                    "id",
                    "name",
                    "location",
                    "address",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID de la sucursal",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Nombre de la sucursal",
                        "type": "string"
                    },
                    "location": {
                        "description": "Ubicación de la sucursal",
                        "type": "string"
                    },
                    "address": {
                        "description": "Dirección de la sucursal",
                        "type": "string"
                    },
                    "state": {
                        "description": "Estado de la sucursal",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Fecha de creación de la sucursal",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Fecha de actualización de la sucursal",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Fecha de eliminación de la sucursal",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Cargos": {
                "title": "Cargos",
                "description": "Modelo de Cargos",
                "required": [
                    "id",
                    "description",
                    "state",
                    "vehicle_id"
                ],
                "properties": {
                    "id": {
                        "description": "ID del reception",
                        "type": "integer"
                    },
                    "pathFile": {
                        "description": "Ruta del archivo relacionado con el reception",
                        "type": "string"
                    },
                    "description": {
                        "description": "Descripción del reception",
                        "type": "string"
                    },
                    "status": {
                        "description": "Estado del reception (e.g., activo, vencido)",
                        "type": "string"
                    },
                    "state": {
                        "description": "Estado booleano del reception",
                        "type": "boolean"
                    },
                    "reception_id": {
                        "description": "ID de la recepción asociado",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Fecha de creación del reception",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Fecha de actualización del reception",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CarrierGuide": {
                "title": "carrier_guide",
                "description": "Carrier guide model",
                "required": [
                    "id",
                    "status",
                    "document",
                    "subContract",
                    "transferStartDate",
                    "tract_id",
                    "platform_id",
                    "origin_id",
                    "destination_id",
                    "sender_id",
                    "recipient_id",
                    "payResponsible_id",
                    "driver_id"
                ],
                "properties": {
                    "id": {
                        "description": "Carrier guide ID",
                        "type": "integer"
                    },
                    "status": {
                        "description": "Status of the carrier guide",
                        "type": "string"
                    },
                    "numero": {
                        "description": "numero of the carrier guide",
                        "type": "string"
                    },
                    "subContract": {
                        "description": "Subcontract of the carrier guide",
                        "type": "string"
                    },
                    "motivo": {
                        "description": "Motivo of the carrier guide",
                        "type": "string"
                    },
                    "codemotivo": {
                        "description": "Subcontract of the carrier guide",
                        "type": "string"
                    },
                    "transferStartDate": {
                        "description": "Transfer start date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "transferDateEstimated": {
                        "description": "Transfer start date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "tract_id": {
                        "description": "ID of the tract",
                        "type": "integer"
                    },
                    "platform_id": {
                        "description": "ID of the platform",
                        "type": "integer"
                    },
                    "origin_id": {
                        "description": "ID of the origin",
                        "type": "integer"
                    },
                    "destination_id": {
                        "description": "ID of the destination",
                        "type": "integer"
                    },
                    "sender_id": {
                        "description": "ID of the sender",
                        "type": "integer"
                    },
                    "recipient_id": {
                        "description": "ID of the recipient",
                        "type": "integer"
                    },
                    "payResponsible_id": {
                        "description": "ID of the pay responsible",
                        "type": "integer"
                    },
                    "driver_id": {
                        "description": "ID of the driver",
                        "type": "integer"
                    },
                    "copilot_id": {
                        "description": "ID of the copilot",
                        "type": "integer"
                    },
                    "subcontract_id": {
                        "description": "ID of Subcontract",
                        "type": "integer"
                    },
                    "reception_id": {
                        "description": "ID of Reception",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "created_at",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "updated_at",
                        "type": "integer"
                    },
                    "deleted_at": {
                        "description": "deleted_at",
                        "type": "integer"
                    },
                    "origin": {
                        "$ref": "#/components/schemas/Place"
                    },
                    "destination": {
                        "$ref": "#/components/schemas/Place"
                    },
                    "tract": {
                        "$ref": "#/components/schemas/Vehicle"
                    },
                    "platform": {
                        "$ref": "#/components/schemas/Vehicle"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Person"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Person"
                    },
                    "payResponsible": {
                        "$ref": "#/components/schemas/Person"
                    },
                    "driver": {
                        "$ref": "#/components/schemas/Worker"
                    },
                    "copilot": {
                        "$ref": "#/components/schemas/Worker"
                    },
                    "subcontract": {
                        "$ref": "#/components/schemas/Subcontract"
                    },
                    "branch_office": {
                        "$ref": "#/components/schemas/BranchOffice"
                    },
                    "reception": {
                        "$ref": "#/components/schemas/Reception"
                    }
                },
                "type": "object"
            },
            "Comission_Agent": {
                "title": "commision_agent",
                "description": "Model representing commission agents",
                "required": [
                    "paymentComission",
                    "state",
                    "person_id"
                ],
                "properties": {
                    "id": {
                        "description": "ID of the commission agent",
                        "type": "integer"
                    },
                    "paymentComission": {
                        "description": "Payment commission of the agent",
                        "type": "string"
                    },
                    "state": {
                        "description": "State of the commission agent",
                        "type": "boolean"
                    },
                    "person_id": {
                        "description": "User person",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Creation date of the commission agent",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Update date of the commission agent",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Deletion date of the commission agent",
                        "type": "string",
                        "format": "date-time"
                    },
                    "person": {
                        "$ref": "#/components/schemas/Person"
                    }
                },
                "type": "object"
            },
            "ContactInfo": {
                "title": "contact_info",
                "description": "Contact Info Model",
                "required": [
                    "id",
                    "names",
                    "fatherSurname",
                    "motherSurname",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID of the contact info",
                        "type": "integer"
                    },
                    "names": {
                        "description": "Names of the contact info",
                        "type": "string"
                    },
                    "fatherSurname": {
                        "description": "Father's surname of the contact info",
                        "type": "string"
                    },
                    "motherSurname": {
                        "description": "Mother's surname of the contact info",
                        "type": "string"
                    },
                    "address": {
                        "description": "Address of the contact info",
                        "type": "string",
                        "nullable": true
                    },
                    "telephone": {
                        "description": "Telephone number of the contact info",
                        "type": "string",
                        "nullable": true
                    },
                    "email": {
                        "description": "Email address of the contact info",
                        "type": "string",
                        "nullable": true
                    },
                    "state": {
                        "description": "State of the contact info",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Creation date of the contact info",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last update date of the contact info",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Deletion date of the contact info (if applicable)",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "person": {
                        "$ref": "#/components/schemas/Person"
                    }
                },
                "type": "object"
            },
            "CreditNote": {
                "title": "credit_note",
                "description": "Credit note Model",
                "required": [
                    "id",
                    "number",
                    "reason",
                    "moviment_id"
                ],
                "properties": {
                    "id": {
                        "description": "ID of the contact info",
                        "type": "integer"
                    },
                    "number": {
                        "description": "Number of the contact info",
                        "type": "string"
                    },
                    "total": {
                        "description": "Total",
                        "type": "number",
                        "format": "decimal",
                        "nullable": true
                    },
                    "reason": {
                        "description": "Reason for the contact info",
                        "type": "string"
                    },
                    "comment": {
                        "description": "Comment related to the contact info",
                        "type": "string"
                    },
                    "state": {
                        "description": "State of the contact info",
                        "type": "boolean"
                    },
                    "moviment_id": {
                        "description": "ID of the related moviment",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Creation date of the contact info",
                        "type": "string",
                        "format": "date-time"
                    },
                    "moviment": {
                        "$ref": "#/components/schemas/MovimentRequest"
                    },
                    "branchOffice_id": {
                        "description": "ID de la sucursal",
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "DetailGrt": {
                "title": "detail_grt",
                "description": "Detail reception model",
                "required": [
                    "id",
                    "description",
                    "weight",
                    "paymentAmount",
                    "debtAmount",
                    "comment",
                    "reception_id"
                ],
                "properties": {
                    "id": {
                        "description": "Detail reception ID",
                        "type": "integer"
                    },
                    "carrierGuide_id": {
                        "description": "Carrier Guide ID",
                        "type": "integer"
                    },
                    "detailReception_id": {
                        "description": "Detail Reception ID",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Update date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Deletion date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "comission_Agent": {
                        "$ref": "#/components/schemas/Comission_Agent"
                    },
                    "carrier_guide": {
                        "$ref": "#/components/schemas/CarrierGuide"
                    }
                },
                "type": "object"
            },
            "DetailReception": {
                "title": "detail_reception",
                "description": "Detail reception model",
                "required": [
                    "id",
                    "description",
                    "weight",
                    "paymentAmount",
                    "debtAmount",
                    "comment",
                    "reception_id"
                ],
                "properties": {
                    "id": {
                        "description": "Detail reception ID",
                        "type": "integer"
                    },
                    "numero": {
                        "description": "Numero",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description",
                        "type": "string"
                    },
                    "weight": {
                        "description": "Weight",
                        "type": "number",
                        "format": "float"
                    },
                    "paymentAmount": {
                        "description": "Payment amount",
                        "type": "number",
                        "format": "float"
                    },
                    "debtAmount": {
                        "description": "Debt amount",
                        "type": "number",
                        "format": "float"
                    },
                    "comissionAmount": {
                        "description": "Commission amount",
                        "type": "number",
                        "format": "float"
                    },
                    "costLoad": {
                        "description": "Load cost",
                        "type": "number",
                        "format": "float"
                    },
                    "unit": {
                        "description": "Load cost",
                        "type": "number",
                        "format": "string"
                    },
                    "cant": {
                        "description": "Cant",
                        "type": "number",
                        "format": "float"
                    },
                    "costDownload": {
                        "description": "Download cost",
                        "type": "number",
                        "format": "float"
                    },
                    "comment": {
                        "description": "Comment",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status",
                        "type": "string"
                    },
                    "comissionAgent_id": {
                        "description": "Commission agent ID",
                        "type": "integer"
                    },
                    "reception_id": {
                        "description": "Reception ID",
                        "type": "integer"
                    },
                    "product_id": {
                        "description": "Product ID",
                        "type": "integer"
                    },
                    "tarifa_id": {
                        "description": "Tarifa ID",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Update date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Deletion date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "reception": {
                        "$ref": "#/components/schemas/Reception"
                    },
                    "carrier_guide": {
                        "$ref": "#/components/schemas/CarrierGuide"
                    }
                },
                "type": "object"
            },
            "DetailWorker": {
                "title": "detail_worker",
                "description": "Detail Worker model",
                "required": [
                    "id",
                    "description",
                    "worker_id",
                    "programming_id"
                ],
                "properties": {
                    "id": {
                        "description": "Detail Worker ID",
                        "type": "integer"
                    },
                    "function": {
                        "description": "Function Worker",
                        "type": "string"
                    },
                    "worker_id": {
                        "description": "Worker ID",
                        "type": "integer"
                    },
                    "programming_id": {
                        "description": "Programming ID",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Update date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Deletion date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "worker": {
                        "$ref": "#/components/schemas/Worker"
                    },
                    "programming": {
                        "$ref": "#/components/schemas/Programming"
                    }
                },
                "type": "object"
            },
            "Document": {
                "title": "Document",
                "description": "Modelo de Documento",
                "required": [
                    "id",
                    "description",
                    "state",
                    "vehicle_id"
                ],
                "properties": {
                    "id": {
                        "description": "ID del documento",
                        "type": "integer"
                    },
                    "pathFile": {
                        "description": "Ruta del archivo relacionado con el documento",
                        "type": "string"
                    },
                    "description": {
                        "description": "Descripción del documento",
                        "type": "string"
                    },
                    "number": {
                        "description": "Número del documento",
                        "type": "string"
                    },
                    "dueDate": {
                        "description": "Fecha de vencimiento del documento",
                        "type": "string",
                        "format": "date"
                    },
                    "status": {
                        "description": "Estado del documento (e.g., activo, vencido)",
                        "type": "string"
                    },
                    "state": {
                        "description": "Estado booleano del documento",
                        "type": "boolean"
                    },
                    "vehicle_id": {
                        "description": "ID del vehículo asociado al documento",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Fecha de creación del documento",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Fecha de actualización del documento",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "DriverExpense": {
                "title": "driver_expense",
                "description": "Driver Expense Schema",
                "required": [
                    "id",
                    "programming_id",
                    "expensesConcept_id",
                    "total",
                    "amount",
                    "quantity",
                    "place",
                    "km",
                    "routeFact",
                    "gallons",
                    "expenseDate"
                ],
                "properties": {
                    "id": {
                        "description": "DriverExpense ID",
                        "type": "integer"
                    },
                    "programming_id": {
                        "description": "ID of the programming",
                        "type": "integer"
                    },
                    "expensesConcept_id": {
                        "description": "ID of the expenses concept",
                        "type": "integer"
                    },
                    "amount": {
                        "description": "Amount of the expense",
                        "type": "number",
                        "format": "float"
                    },
                    "quantity": {
                        "description": "Quantity of items",
                        "type": "integer"
                    },
                    "place": {
                        "description": "Place where the expense occurred",
                        "type": "string"
                    },
                    "km": {
                        "description": "Kilometers at the time of expense",
                        "type": "integer"
                    },
                    "routeFact": {
                        "description": "Route factored",
                        "type": "string"
                    },
                    "gallons": {
                        "description": "Gallons used",
                        "type": "number",
                        "format": "float"
                    },
                    "date_expense": {
                        "description": "Date of the expense",
                        "type": "string",
                        "format": "date"
                    },
                    "comment": {
                        "description": "Additional comments about the expense",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "ExpensesConcept": {
                "title": "expenseConcept",
                "description": "ExpensesConcept model",
                "required": [
                    "id",
                    "name",
                    "abbreviation",
                    "description",
                    "state",
                    "created_at",
                    "updated_at",
                    "deleted_at"
                ],
                "properties": {
                    "id": {
                        "description": "ExpensesConcept ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the expenseConcept",
                        "type": "string"
                    },
                    "type": {
                        "description": "type of the expenseConcept",
                        "type": "string"
                    },
                    "state": {
                        "description": "State of the expenseConcept",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "GroupMenu": {
                "title": "group_menu",
                "description": "Modelo de Menú de Grupo",
                "required": [
                    "id",
                    "name",
                    "icon",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID del menú de grupo",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Nombre del menú de grupo",
                        "type": "string"
                    },
                    "icon": {
                        "description": "Ícono del menú de grupo",
                        "type": "string"
                    },
                    "state": {
                        "description": "Estado del menú de grupo",
                        "type": "boolean"
                    },
                    "groupMenu": {
                        "description": "Grupo padre",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Fecha de creación del menú de grupo",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Fecha de actualización del menú de grupo",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Installment": {
                "title": "installment",
                "description": "Modelo de installment",
                "required": [
                    "id",
                    "name",
                    "serie",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID de la installment",
                        "type": "integer"
                    },
                    "number": {
                        "description": "Nombre de la installment",
                        "type": "string"
                    },
                    "date": {
                        "description": "Estado de la installment",
                        "type": "string",
                        "format": "date"
                    },
                    "total": {
                        "description": "Nombre de la installment",
                        "type": "integer"
                    },
                    "moviment_id": {
                        "description": "Branch Office",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Fecha de creación de la installment",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Model_functional": {
                "title": "model_functional",
                "description": "Functional model",
                "required": [
                    "id",
                    "name",
                    "abbreviation",
                    "description",
                    "state",
                    "created_at",
                    "updated_at",
                    "deleted_at"
                ],
                "properties": {
                    "id": {
                        "description": "Functional model ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the functional model",
                        "type": "string"
                    },
                    "abbreviation": {
                        "description": "Abbreviation of the functional model",
                        "type": "string"
                    },
                    "reference": {
                        "description": "Description of the functional model",
                        "type": "string"
                    },
                    "state": {
                        "description": "State of the functional model",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Update date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Deletion date",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Motive": {
                "title": "motive",
                "description": "Functional model",
                "required": [
                    "id",
                    "name",
                    "abbreviation",
                    "description",
                    "state",
                    "created_at",
                    "updated_at",
                    "deleted_at"
                ],
                "properties": {
                    "id": {
                        "description": "Functional model ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the functional model",
                        "type": "string"
                    },
                    "code": {
                        "description": "Code motive",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Update date",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "MovimentRequest": {
                "title": "moviment",
                "description": "Movimiento",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "description": "ID del moviment",
                        "type": "integer"
                    },
                    "sequentialNumber": {
                        "description": "Número secuencial",
                        "type": "string",
                        "nullable": true
                    },
                    "paymentDate": {
                        "description": "Fecha de pago",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "total": {
                        "description": "Total",
                        "type": "number",
                        "format": "decimal",
                        "nullable": true
                    },
                    "yape": {
                        "description": "Pago por Yape",
                        "type": "number",
                        "format": "decimal",
                        "nullable": true
                    },
                    "deposit": {
                        "description": "Depósito",
                        "type": "number",
                        "format": "decimal",
                        "nullable": true
                    },
                    "cash": {
                        "description": "Efectivo",
                        "type": "number",
                        "format": "decimal",
                        "nullable": true
                    },
                    "card": {
                        "description": "Pago por tarjeta",
                        "type": "number",
                        "format": "decimal",
                        "nullable": true
                    },
                    "plin": {
                        "description": "Pago por tarjeta",
                        "type": "number",
                        "format": "decimal",
                        "nullable": true
                    },
                    "comment": {
                        "description": "Comentario",
                        "type": "string",
                        "nullable": true
                    },
                    "movType": {
                        "description": "Tipo Movimiento",
                        "type": "string",
                        "nullable": true
                    },
                    "typeDocument": {
                        "description": "Tipo de documento",
                        "type": "string",
                        "nullable": true
                    },
                    "isBankPayment": {
                        "description": "Tipo de documento",
                        "type": "boolean",
                        "nullable": true
                    },
                    "numberVoucher": {
                        "description": "Tipo de documento",
                        "type": "string",
                        "nullable": true
                    },
                    "routeVoucher": {
                        "description": "Tipo de documento",
                        "type": "string",
                        "nullable": true
                    },
                    "typePayment": {
                        "description": "Tipo de pago",
                        "type": "string",
                        "nullable": true
                    },
                    "typeSale": {
                        "description": "Tipo de venta",
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "description": "Estado",
                        "type": "string",
                        "nullable": true
                    },
                    "programming_id": {
                        "description": "ID de programación",
                        "type": "integer",
                        "nullable": true
                    },
                    "paymentConcept_id": {
                        "description": "ID del concepto de pago",
                        "type": "integer",
                        "nullable": true
                    },
                    "box_id": {
                        "description": "ID de la caja",
                        "type": "integer",
                        "nullable": true
                    },
                    "branchOffice_id": {
                        "description": "ID de la sucursal",
                        "type": "integer",
                        "nullable": true
                    },
                    "reception_id": {
                        "description": "ID de la recepción",
                        "type": "integer"
                    },
                    "person_id": {
                        "description": "ID de la persona",
                        "type": "integer",
                        "nullable": true
                    },
                    "user_id": {
                        "description": "ID del usuario",
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "PayInstallment": {
                "title": "Pay Installment",
                "description": "Modelo de Cuota de Pago",
                "required": [
                    "id",
                    "number",
                    "total",
                    "paymentDate",
                    "status",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID de la cuota de pago",
                        "type": "integer"
                    },
                    "number": {
                        "description": "Número de la cuota",
                        "type": "integer"
                    },
                    "total": {
                        "description": "Monto total de la cuota",
                        "type": "number",
                        "format": "float"
                    },
                    "paymentDate": {
                        "description": "Fecha de pago de la cuota",
                        "type": "string",
                        "format": "date"
                    },
                    "comment": {
                        "description": "Comentario adicional sobre la cuota",
                        "type": "string"
                    },
                    "yape": {
                        "description": "Monto pagado vía Yape",
                        "type": "number",
                        "format": "float"
                    },
                    "deposit": {
                        "description": "Monto pagado vía depósito",
                        "type": "number",
                        "format": "float"
                    },
                    "cash": {
                        "description": "Monto pagado en efectivo",
                        "type": "number",
                        "format": "float"
                    },
                    "card": {
                        "description": "Monto pagado con tarjeta",
                        "type": "number",
                        "format": "float"
                    },
                    "plin": {
                        "description": "Monto pagado vía Plin",
                        "type": "number",
                        "format": "float"
                    },
                    "status": {
                        "description": "Estado del pago (e.g., 'pagado', 'pendiente')",
                        "type": "string"
                    },
                    "state": {
                        "description": "Estado de la cuota de pago (activo o inactivo)",
                        "type": "boolean"
                    },
                    "installment_id": {
                        "description": "ID de la cuota asociada",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Fecha de creación de la cuota de pago",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Fecha de actualización de la cuota de pago",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Fecha de eliminación de la cuota de pago",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "PaymentConcept": {
                "title": "payment_concept",
                "description": "Modelo de Concepto de Pago",
                "required": [
                    "id",
                    "name",
                    "type",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID del concepto de pago",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Nombre del concepto de pago",
                        "type": "string"
                    },
                    "type": {
                        "description": "Tipo del concepto de pago",
                        "type": "string"
                    },
                    "state": {
                        "description": "Estado del concepto de pago",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Fecha de creación del concepto de pago",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Fecha de actualización del concepto de pago",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Fecha de eliminación del concepto de pago",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Person": {
                "title": "person",
                "description": "Modelo de Persona",
                "required": [
                    "id",
                    "typeofDocument",
                    "documentNumber",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID de la persona",
                        "type": "integer"
                    },
                    "typeofDocument": {
                        "description": "Tipo de documento de la persona",
                        "type": "string"
                    },
                    "documentNumber": {
                        "description": "Número de documento de la persona",
                        "type": "string"
                    },
                    "names": {
                        "description": "Nombres de la persona",
                        "type": "string"
                    },
                    "fatherSurname": {
                        "description": "Apellido paterno de la persona",
                        "type": "string"
                    },
                    "motherSurname": {
                        "description": "Apellido materno de la persona",
                        "type": "string"
                    },
                    "birthDate": {
                        "description": "Fecha de nacimiento de la persona",
                        "type": "string",
                        "format": "date"
                    },
                    "address": {
                        "description": "Dirección de la persona",
                        "type": "string"
                    },
                    "telephone": {
                        "description": "Teléfono de la persona",
                        "type": "string"
                    },
                    "email": {
                        "description": "Correo electrónico de la persona",
                        "type": "string"
                    },
                    "businessName": {
                        "description": "Nombre de la empresa de la persona",
                        "type": "string"
                    },
                    "comercialName": {
                        "description": "Nombre comercial de la persona",
                        "type": "string"
                    },
                    "fiscalAddress": {
                        "description": "Dirección fiscal de la persona",
                        "type": "string"
                    },
                    "places": {
                        "description": "Lugares del proveedor",
                        "type": "string"
                    },
                    "representativePersonDni": {
                        "description": "DNI del representante de la persona",
                        "type": "string"
                    },
                    "representativePersonName": {
                        "description": "Nombre del representante de la persona",
                        "type": "string"
                    },
                    "state": {
                        "description": "Estado de la persona",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Fecha de creación de la persona",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Fecha de actualización de la persona",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Fecha de eliminación de la persona",
                        "type": "string",
                        "format": "date-time"
                    },
                    "branch_office": {
                        "$ref": "#/components/schemas/BranchOffice"
                    }
                },
                "type": "object"
            },
            "Photo": {
                "title": "photo",
                "description": "Modelo de Foto",
                "required": [
                    "id",
                    "name",
                    "vehicle_id"
                ],
                "properties": {
                    "id": {
                        "description": "ID de la foto",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Nombre de la foto",
                        "type": "string"
                    },
                    "description": {
                        "description": "Descripción de la foto",
                        "type": "string"
                    },
                    "vehicle_id": {
                        "description": "ID del vehículo asociado",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Fecha de creación de la foto",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Fecha de actualización de la foto",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Fecha de eliminación de la foto",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Place": {
                "title": "place",
                "description": "Place Model",
                "required": [
                    "id",
                    "name",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID of the place",
                        "type": "integer"
                    },
                    "ubigeo": {
                        "description": "ubigeo of the place",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the place",
                        "type": "string"
                    },
                    "district_id": {
                        "description": "District ubigeo",
                        "type": "string"
                    },
                    "state": {
                        "description": "State of the place",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Creation date of the place",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last update date of the place",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Programming": {
                "title": "Programming",
                "description": "Programming schema",
                "required": [
                    "id",
                    "departureDate",
                    "estimatedArrivalDate",
                    "state",
                    "origin_id",
                    "destination_id",
                    "tract_id",
                    "platForm_id",
                    "created_at",
                    "updated_at",
                    "deleted_at"
                ],
                "properties": {
                    "id": {
                        "description": "Programming ID",
                        "type": "integer"
                    },
                    "numero": {
                        "description": "Number Tip",
                        "type": "string"
                    },
                    "departureDate": {
                        "description": "Departure date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "estimatedArrivalDate": {
                        "description": "Estimated arrival date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "actualArrivalDate": {
                        "description": "Actual arrival date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "isload": {
                        "description": "Indicates if the programming is loaded",
                        "type": "boolean"
                    },
                    "totalWeight": {
                        "description": "Total weight in the programming",
                        "type": "number",
                        "format": "float"
                    },
                    "totalViaje": {
                        "description": "Total trip cost",
                        "type": "number",
                        "format": "float"
                    },
                    "carrierQuantity": {
                        "description": "Quantity of carriers involved",
                        "type": "integer"
                    },
                    "detailQuantity": {
                        "description": "Quantity of details",
                        "type": "integer"
                    },
                    "totalAmount": {
                        "description": "Total amount of the programming",
                        "type": "number",
                        "format": "float"
                    },
                    "state": {
                        "description": "State of the programming",
                        "type": "string"
                    },
                    "dateLiquidacion": {
                        "description": "Date of liquidation",
                        "type": "string",
                        "format": "date"
                    },
                    "statusLiquidacion": {
                        "description": "Status of the liquidation",
                        "type": "integer"
                    },
                    "status": {
                        "description": "Current status of the programming",
                        "type": "string"
                    },
                    "origin_id": {
                        "description": "ID of the origin",
                        "type": "integer"
                    },
                    "destination_id": {
                        "description": "ID of the destination",
                        "type": "integer"
                    },
                    "tract_id": {
                        "description": "ID of the tract",
                        "type": "integer"
                    },
                    "platForm_id": {
                        "description": "ID of the platform",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Update date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Deletion date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "origin": {
                        "$ref": "#/components/schemas/Place"
                    },
                    "destination": {
                        "$ref": "#/components/schemas/Place"
                    },
                    "tract": {
                        "$ref": "#/components/schemas/Vehicle"
                    },
                    "platform": {
                        "$ref": "#/components/schemas/Vehicle"
                    },
                    "branch_office": {
                        "$ref": "#/components/schemas/BranchOffice"
                    }
                },
                "type": "object"
            },
            "Reception": {
                "title": "reception",
                "description": "Reception Model",
                "required": [
                    "id",
                    "codeReception",
                    "comment",
                    "paymentAmount",
                    "typeService",
                    "typeDelivery",
                    "user_id",
                    "origin_id",
                    "sender_id",
                    "destination_id",
                    "recipient_id",
                    "pickupResponsible_id",
                    "payResponsible_id",
                    "seller_id",
                    "pointSender_id",
                    "pointDestination_id",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID Reception",
                        "type": "integer"
                    },
                    "codeReception": {
                        "description": "Code of reception",
                        "type": "string"
                    },
                    "netWeight": {
                        "description": "Net weight of the reception",
                        "type": "number",
                        "format": "decimal"
                    },
                    "paymentAmount": {
                        "description": "Amount paid for the reception",
                        "type": "number",
                        "format": "decimal"
                    },
                    "debtAmount": {
                        "description": "Amount of debt for the reception",
                        "type": "number",
                        "format": "decimal"
                    },
                    "conditionPay": {
                        "description": "Condition Pay for the reception",
                        "type": "string"
                    },
                    "typeService": {
                        "description": "Type of service for the reception",
                        "type": "string"
                    },
                    "type_responsiblePay": {
                        "description": "Type of Responsible Pay for the reception",
                        "type": "string"
                    },
                    "numberDays": {
                        "description": "Number of days for the reception",
                        "type": "integer"
                    },
                    "creditAmount": {
                        "description": "Amount for Credit",
                        "type": "decimal"
                    },
                    "typeDelivery": {
                        "description": "Type of delivery for the reception",
                        "type": "string"
                    },
                    "nro_sale": {
                        "description": "Tipo de documento",
                        "type": "string",
                        "nullable": true
                    },
                    "receptionDate": {
                        "description": "receptionDate for the reception",
                        "type": "string",
                        "format": "date"
                    },
                    "transferLimitDate": {
                        "description": "transferLimitDate for the reception",
                        "type": "string",
                        "format": "date"
                    },
                    "transferStartDate": {
                        "description": "transferStartDate for the reception",
                        "type": "string",
                        "format": "date"
                    },
                    "estimatedDeliveryDate": {
                        "description": "estimatedDeliveryDate for the reception",
                        "type": "string",
                        "format": "date"
                    },
                    "actualDeliveryDate": {
                        "description": "actualDeliveryDate for the reception",
                        "type": "string",
                        "format": "date"
                    },
                    "user_id": {
                        "description": "ID of the user associated with the reception",
                        "type": "integer"
                    },
                    "origin_id": {
                        "description": "ID of the origin associated with the reception",
                        "type": "integer"
                    },
                    "sender_id": {
                        "description": "ID of the sender associated with the reception",
                        "type": "integer"
                    },
                    "destination_id": {
                        "description": "ID of the destination associated with the reception",
                        "type": "integer"
                    },
                    "recipient_id": {
                        "description": "ID of the recipient associated with the reception",
                        "type": "integer"
                    },
                    "pickupResponsible_id": {
                        "description": "ID of the pickup responsible associated with the reception",
                        "type": "integer"
                    },
                    "payResponsible_id": {
                        "description": "ID of the payment responsible associated with the reception",
                        "type": "integer"
                    },
                    "seller_id": {
                        "description": "ID of the seller associated with the reception",
                        "type": "integer"
                    },
                    "pointSender_id": {
                        "description": "ID of the adress sender",
                        "type": "integer"
                    },
                    "pointDestination_id": {
                        "description": "ID of the point Destination",
                        "type": "integer"
                    },
                    "comment": {
                        "description": "Comment of the reception",
                        "type": "string"
                    },
                    "tokenResponsible": {
                        "description": "Token Responsible",
                        "type": "string"
                    },
                    "address": {
                        "description": "Token Responsible",
                        "type": "string"
                    },
                    "state": {
                        "description": "State of the reception",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Creation date of the reception",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last update date of the reception",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Deletion date of the reception (if applicable)",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "origin": {
                        "$ref": "#/components/schemas/Place"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/Person"
                    },
                    "destination": {
                        "$ref": "#/components/schemas/Place"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/Person"
                    },
                    "pickupResponsible": {
                        "$ref": "#/components/schemas/ContactInfo"
                    },
                    "payResponsible": {
                        "$ref": "#/components/schemas/Person"
                    },
                    "seller": {
                        "$ref": "#/components/schemas/Worker"
                    },
                    "pointSender": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "pointDestination": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "branch_office": {
                        "$ref": "#/components/schemas/BranchOffice"
                    }
                },
                "type": "object"
            },
            "Route": {
                "required": [
                    "id",
                    "placeStart",
                    "placeEnd",
                    "placeStart_id",
                    "placeEnd_id",
                    "state"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "placeStart": {
                        "type": "string",
                        "example": "Chclayo"
                    },
                    "placeEnd": {
                        "type": "string",
                        "example": "Lima"
                    },
                    "placeStart_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "placeEnd_id": {
                        "type": "integer",
                        "example": 2
                    },
                    "state": {
                        "type": "string",
                        "example": "1"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-08-10T12:34:56Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-08-10T12:34:56Z"
                    },
                    "deleted_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "null"
                    }
                },
                "type": "object"
            },
            "Subcontract": {
                "title": "Subcontract",
                "description": "Subcontract schema for OpenAPI documentation",
                "required": [
                    "id",
                    "name"
                ],
                "properties": {
                    "id": {
                        "description": "Subcontract ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name",
                        "type": "string"
                    },
                    "typeofDocument": {
                        "description": "Type of document",
                        "type": "string"
                    },
                    "documentNumber": {
                        "description": "Document number",
                        "type": "string"
                    },
                    "address": {
                        "description": "Address",
                        "type": "string"
                    },
                    "comercialName": {
                        "description": "Commercial name",
                        "type": "string"
                    },
                    "representativePersonDni": {
                        "description": "Representative person's DNI",
                        "type": "string"
                    },
                    "representativePersonName": {
                        "description": "Representative person's name",
                        "type": "string"
                    },
                    "telephone": {
                        "description": "Telephone",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Update date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Deletion date",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "TypeCarroceria": {
                "title": "TypeCarroceria",
                "description": "Type of Carroceria",
                "required": [
                    "id",
                    "description"
                ],
                "properties": {
                    "id": {
                        "description": "Type Carroceria ID",
                        "type": "integer"
                    },
                    "description": {
                        "description": "Description of the Type Carroceria",
                        "type": "string"
                    },
                    "state": {
                        "description": "State of the Type Carroceria",
                        "type": "string",
                        "example": "1"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Update date",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "TypeCompany": {
                "title": "TypeCompany",
                "description": "Type of Company",
                "required": [
                    "id",
                    "description"
                ],
                "properties": {
                    "id": {
                        "description": "Type Company ID",
                        "type": "integer"
                    },
                    "description": {
                        "description": "Description of the Type Company",
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "example": "1"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Update date",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Option_Menu": {
                "title": "option_menu",
                "description": "Modelo de Opcion de Menu",
                "required": [
                    "name",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID del Opcion de Menu",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Nombre del Opcion de Menu",
                        "type": "string"
                    },
                    "route": {
                        "description": "Route del Opcion de Menu",
                        "type": "string"
                    },
                    "icon": {
                        "description": "Icon del Opcion de Menu",
                        "type": "string"
                    },
                    "state": {
                        "description": "Estado del Opcion de Menu",
                        "type": "boolean"
                    },
                    "guard_name": {
                        "description": "Nombre de la guardia asociada al Opcion de Menu",
                        "type": "string"
                    },
                    "groupMenu_id": {
                        "description": "User groupMenu",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Fecha de creación del Opcion de Menu",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Fecha de actualización del Opcion de Menu",
                        "type": "string",
                        "format": "date-time"
                    },
                    "pivot": {
                        "description": "Información de la tabla pivot",
                        "properties": {
                            "role_id": {
                                "description": "ID del rol asociado",
                                "type": "integer"
                            },
                            "permission_id": {
                                "description": "ID del permiso asociado",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "groupMenu": {
                        "$ref": "#/components/schemas/GroupMenu"
                    }
                },
                "type": "object"
            },
            "TypeOf_User": {
                "title": "typeof_user",
                "description": "Modelo de Tipo de Usuario",
                "required": [
                    "name",
                    "state"
                ],
                "properties": {
                    "id": {
                        "description": "ID del tipo de usuario",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Nombre del tipo de usuario",
                        "type": "string"
                    },
                    "state": {
                        "description": "Estado del tipo de usuario",
                        "type": "boolean"
                    },
                    "guard_name": {
                        "description": "Nombre de la guardia asociada al tipo de usuario",
                        "type": "string"
                    },
                    "groupMenu_id": {
                        "description": "User groupMenu",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Fecha de creación del tipo de usuario",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Fecha de actualización del tipo de usuario",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "User": {
                "title": "user",
                "description": "User model",
                "required": [
                    "id",
                    "username",
                    "typeofUser_id",
                    "worker_id"
                ],
                "properties": {
                    "id": {
                        "description": "User ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "username": {
                        "description": "Username",
                        "type": "string"
                    },
                    "state": {
                        "description": "User state",
                        "type": "string"
                    },
                    "typeofUser_id": {
                        "description": "User typeofUser",
                        "type": "integer"
                    },
                    "worker_id": {
                        "description": "User worker",
                        "type": "integer"
                    },
                    "box_id": {
                        "description": "Id de la caja",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last update date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Deletion date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "box": {
                        "$ref": "#/components/schemas/Box"
                    },
                    "worker": {
                        "$ref": "#/components/schemas/Worker"
                    },
                    "typeOf_User": {
                        "$ref": "#/components/schemas/TypeOf_User"
                    }
                },
                "type": "object"
            },
            "Vehicle": {
                "title": "vehicle",
                "description": "Vehicle model",
                "required": [
                    "status",
                    "oldPlate",
                    "currentPlate",
                    "numberMtc",
                    "brand",
                    "numberModel",
                    "tara",
                    "netWeight",
                    "usefulLoad",
                    "ownerCompany",
                    "length",
                    "width",
                    "height",
                    "ejes",
                    "wheels",
                    "color",
                    "year",
                    "tireType",
                    "tireSuspension",
                    "created_at",
                    "updated_at",
                    "deleted_at",
                    "modelVehicle_id",
                    "typeVehicle_id"
                ],
                "properties": {
                    "status": {
                        "description": "Status of the vehicle",
                        "type": "string"
                    },
                    "oldPlate": {
                        "description": "Old plate of the vehicle",
                        "type": "string"
                    },
                    "currentPlate": {
                        "description": "Current plate of the vehicle",
                        "type": "string"
                    },
                    "numberMtc": {
                        "description": "Number MTC of the vehicle",
                        "type": "string"
                    },
                    "brand": {
                        "description": "Brand of the vehicle",
                        "type": "string"
                    },
                    "numberModel": {
                        "description": "Number model of the vehicle",
                        "type": "string"
                    },
                    "tara": {
                        "description": "Tara of the vehicle",
                        "type": "number",
                        "format": "float"
                    },
                    "netWeight": {
                        "description": "Net weight of the vehicle",
                        "type": "number",
                        "format": "float"
                    },
                    "usefulLoad": {
                        "description": "Useful load of the vehicle",
                        "type": "number",
                        "format": "float"
                    },
                    "ownerCompany": {
                        "description": "Owner company of the vehicle",
                        "type": "string"
                    },
                    "length": {
                        "description": "Length of the vehicle",
                        "type": "number",
                        "format": "float"
                    },
                    "width": {
                        "description": "Width of the vehicle",
                        "type": "number",
                        "format": "float"
                    },
                    "height": {
                        "description": "Height of the vehicle",
                        "type": "number",
                        "format": "float"
                    },
                    "ejes": {
                        "description": "Number of axles of the vehicle",
                        "type": "integer"
                    },
                    "wheels": {
                        "description": "Number of wheels of the vehicle",
                        "type": "integer"
                    },
                    "color": {
                        "description": "Color of the vehicle",
                        "type": "string"
                    },
                    "year": {
                        "description": "Year of manufacture of the vehicle",
                        "type": "integer"
                    },
                    "tireType": {
                        "description": "Type of tires of the vehicle",
                        "type": "string"
                    },
                    "tireSuspension": {
                        "description": "Type of tire suspension of the vehicle",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Creation date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Update date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Deletion date",
                        "type": "string",
                        "format": "date-time"
                    },
                    "modelVehicle_id": {
                        "description": "ID of the vehicle model",
                        "type": "integer"
                    },
                    "typeVehicle_id": {
                        "description": "ID of the vehicle type",
                        "type": "integer"
                    },
                    "modeloFuncional": {
                        "$ref": "#/components/schemas/Model_functional"
                    },
                    "branch_office": {
                        "$ref": "#/components/schemas/BranchOffice"
                    }
                },
                "type": "object"
            },
            "Worker": {
                "title": "worker",
                "description": "Modelo de Trabajador",
                "required": [
                    "id",
                    "department",
                    "province",
                    "district",
                    "occupation",
                    "position",
                    "center",
                    "typeRelationship",
                    "startDate",
                    "person_id",
                    "area_id",
                    "branchOffice_id"
                ],
                "properties": {
                    "id": {
                        "description": "ID del trabajador",
                        "type": "integer"
                    },
                    "code": {
                        "description": "Código del trabajador",
                        "type": "string"
                    },
                    "department": {
                        "description": "Departamento del trabajador",
                        "type": "string"
                    },
                    "province": {
                        "description": "Provincia del trabajador",
                        "type": "string"
                    },
                    "district": {
                        "description": "Distrito del trabajador",
                        "type": "string"
                    },
                    "maritalStatus": {
                        "description": "Estado civil del trabajador",
                        "type": "string"
                    },
                    "levelInstitution": {
                        "description": "Nivel de institución del trabajador",
                        "type": "string"
                    },
                    "occupation": {
                        "description": "Ocupación del trabajador",
                        "type": "string"
                    },
                    "satus": {
                        "description": "Estado del trabajador",
                        "type": "string"
                    },
                    "startDate": {
                        "description": "Fecha de inicio del trabajador",
                        "type": "string",
                        "format": "date"
                    },
                    "endDate": {
                        "description": "Fecha de fin del trabajador",
                        "type": "string",
                        "format": "date"
                    },
                    "person_id": {
                        "description": "User person",
                        "type": "integer"
                    },
                    "area_id": {
                        "description": "User area",
                        "type": "integer"
                    },
                    "branchOffice_id": {
                        "description": "User branchOffice",
                        "type": "integer"
                    },
                    "state": {
                        "description": "Estado del trabajador",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Fecha de creación del trabajador",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Fecha de actualización del trabajador",
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "description": "Fecha de eliminación del trabajador",
                        "type": "string",
                        "format": "date-time"
                    },
                    "person": {
                        "$ref": "#/components/schemas/Person"
                    },
                    "area": {
                        "$ref": "#/components/schemas/Area"
                    },
                    "branchOffice": {
                        "$ref": "#/components/schemas/BranchOffice"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "name": "Authorization",
                "in": "header",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Access",
            "description": "Access"
        },
        {
            "name": "Address",
            "description": "Address"
        },
        {
            "name": "Bank",
            "description": "Bank"
        },
        {
            "name": "Box",
            "description": "Box"
        },
        {
            "name": "BranchOffice",
            "description": "BranchOffice"
        },
        {
            "name": "CarrierGuide",
            "description": "CarrierGuide"
        },
        {
            "name": "ComissionAgent",
            "description": "ComissionAgent"
        },
        {
            "name": "ContactInfo",
            "description": "ContactInfo"
        },
        {
            "name": "CreditNote",
            "description": "CreditNote"
        },
        {
            "name": "DetailGrt",
            "description": "DetailGrt"
        },
        {
            "name": "Detail Reception",
            "description": "Detail Reception"
        },
        {
            "name": "DetailWorker",
            "description": "DetailWorker"
        },
        {
            "name": "Document",
            "description": "Document"
        },
        {
            "name": "DriverExpense",
            "description": "DriverExpense"
        },
        {
            "name": "ExpensesConcept",
            "description": "ExpensesConcept"
        },
        {
            "name": "Installment",
            "description": "Installment"
        },
        {
            "name": "ModelFunctional",
            "description": "ModelFunctional"
        },
        {
            "name": "Motive",
            "description": "Motive"
        },
        {
            "name": "Moviment",
            "description": "Moviment"
        },
        {
            "name": "moviment",
            "description": "moviment"
        },
        {
            "name": "PaymentConcept",
            "description": "PaymentConcept"
        },
        {
            "name": "Report",
            "description": "Report"
        },
        {
            "name": "Clients",
            "description": "Clients"
        },
        {
            "name": "Place",
            "description": "Place"
        },
        {
            "name": "Programming",
            "description": "Programming"
        },
        {
            "name": "Reception",
            "description": "Reception"
        },
        {
            "name": "Routes",
            "description": "Routes"
        },
        {
            "name": "Subcontract",
            "description": "Subcontract"
        },
        {
            "name": "Type Carroceria",
            "description": "Type Carroceria"
        },
        {
            "name": "Type Company",
            "description": "Type Company"
        },
        {
            "name": "TypeofUser",
            "description": "TypeofUser"
        },
        {
            "name": "Ubigeo",
            "description": "Ubigeo"
        },
        {
            "name": "User",
            "description": "User"
        },
        {
            "name": "Authentication",
            "description": "Authentication"
        },
        {
            "name": "Search",
            "description": "Search"
        },
        {
            "name": "Vehicle",
            "description": "Vehicle"
        },
        {
            "name": "Sale",
            "description": "Sale"
        },
        {
            "name": "Sale1",
            "description": "Sale1"
        },
        {
            "name": "Worker",
            "description": "Worker"
        },
        {
            "name": "Area",
            "description": "Area"
        },
        {
            "name": "CargaDocument",
            "description": "CargaDocument"
        },
        {
            "name": "CollectionData",
            "description": "CollectionData"
        },
        {
            "name": "BankAccount",
            "description": "BankAccount"
        },
        {
            "name": "TransactionConcept",
            "description": "TransactionConcept"
        },
        {
            "name": "Product",
            "description": "Product"
        },
        {
            "name": "Tarifario",
            "description": "Tarifario"
        },
        {
            "name": "Unity",
            "description": "Unity"
        }
    ]
}